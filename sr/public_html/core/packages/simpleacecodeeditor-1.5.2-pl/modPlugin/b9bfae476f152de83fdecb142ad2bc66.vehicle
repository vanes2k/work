<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'PluginEvents' => 
    array (
      'cbbfadf7efc3085243dd6544a3931ab4' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnManagerPageBeforeRender","priority":0,"propertyset":0}',
        'guid' => '8e344642cdd9b128f86afd281ed3a209',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnManagerPageBeforeRender',
        ),
        'signature' => 'ea6bab312aac1bdf6868bbd8fb412122',
      ),
      '6326b25a5297f5e6eebdf5d7e911aa73' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnRichTextEditorRegister","priority":0,"propertyset":0}',
        'guid' => 'e9ead7ca4164a773cc48536f0867e36d',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnRichTextEditorRegister',
        ),
        'signature' => '303b24fbb1efe4427e05c3d709ab30b8',
      ),
      '170658c9cc8deffa9ed793696984b3ec' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnSnipFormPrerender","priority":0,"propertyset":0}',
        'guid' => '9ca5b36b69c997c9f43e84f089a4a79d',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnSnipFormPrerender',
        ),
        'signature' => '17608f0a55b182c51d3a7afc47a20960',
      ),
      '686f2885d679c2345d4004e90ac838f0' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnTempFormPrerender","priority":0,"propertyset":0}',
        'guid' => '65fbdfe0a1c0d7facd4cb720b7878e7f',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnTempFormPrerender',
        ),
        'signature' => '3363fed851841b6e160a4bc6b44f785f',
      ),
      'aca90fc032b711605355b47bc2cd7e6c' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnChunkFormPrerender","priority":0,"propertyset":0}',
        'guid' => '25315b3aca6f27d97128a2c08f3a6287',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnChunkFormPrerender',
        ),
        'signature' => '00d35fd58c7e6aa4f68daabd8a138c19',
      ),
      '5ad57c64cb7119d4e66719eaed40df32' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnPluginFormPrerender","priority":0,"propertyset":0}',
        'guid' => '9fc4756ba62f31353b4282fd03219885',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnPluginFormPrerender',
        ),
        'signature' => '7b85b50c103d6c95152971b44a82e3a3',
      ),
      '02918dd990e6f1d99d5dd1b834ce53d7' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnFileCreateFormPrerender","priority":0,"propertyset":0}',
        'guid' => '0d901ea522ed21f8d44fbf4525419f70',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnFileCreateFormPrerender',
        ),
        'signature' => '7bfa601fea22f89889ee8ec259cbbce1',
      ),
      '9fd64f6ee4882770a7ee73559be14d00' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnFileEditFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'ee3ef29a5d699f7d50aa7fe1a870f1ec',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnFileEditFormPrerender',
        ),
        'signature' => 'eb5d2efb359d8ac61fc476585f5c33cd',
      ),
      '3307021d41be2825e2d42792d3e6de32' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnDocFormPrerender","priority":0,"propertyset":0}',
        'guid' => 'c0d4b843e703c64ceef4d38758dc81d4',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnDocFormPrerender',
        ),
        'signature' => '46f53c07c5319967a2cb9033d0c3245e',
      ),
      'fa60942c13dd50d80dd0f7bb9b87e99f' => 
      array (
        'preserve_keys' => true,
        'update_object' => false,
        'unique_key' => 
        array (
          0 => 'pluginid',
          1 => 'event',
        ),
        'class' => 'modPluginEvent',
        'object' => '{"pluginid":0,"event":"OnPluginSave","priority":0,"propertyset":0}',
        'guid' => '2d3970e69ea9e837814c44b88fa5a796',
        'native_key' => 
        array (
          0 => 0,
          1 => 'OnPluginSave',
        ),
        'signature' => '463408c823be0bb8eeec2bf4d3665f63',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'PluginEvents' => 
    array (
      'preserve_keys' => true,
      'update_object' => false,
      'unique_key' => 
      array (
        0 => 'pluginid',
        1 => 'event',
      ),
    ),
  ),
  'namespace' => 'simpleacecodeeditor',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"simpleacecodeeditor-1.5.2-pl\\/modPlugin\\/b9bfae476f152de83fdecb142ad2bc66\\/0\\/","target":"return MODX_ASSETS_PATH . \'components\\/\';","name":"simpleacecodeeditor"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"simpleacecodeeditor-1.5.2-pl\\/modPlugin\\/b9bfae476f152de83fdecb142ad2bc66.transport.resolver.resolver","name":"transport.resolver","type":"php"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '00067c20ba1bf15c82e33b1202bb2c38',
  'package' => 'modx',
  'class' => 'modPlugin',
  'signature' => 'b9bfae476f152de83fdecb142ad2bc66',
  'native_key' => 1,
  'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"SimpleAceCodeEditor","description":"Ace Code Editor *simple* integration - 1.5.2-pl","editor_type":0,"category":0,"cache_type":0,"plugincode":"\\/**\\r\\n * Simple Ace Source Editor Plugin\\r\\n * https:\\/\\/github.com\\/Indigo744\\/Modx-Revo-Simple-Ace-Code-Editor\\r\\n *\\r\\n * Create plugin and paste this code or install it from Package Manager\\r\\n * Set which_element_editor system option to SimpleAceCodeEditor\\r\\n *\\r\\n * Events: OnManagerPageBeforeRender, OnRichTextEditorRegister, OnSnipFormPrerender,\\r\\n * OnTempFormPrerender, OnChunkFormPrerender, OnPluginFormPrerender,\\r\\n * OnFileCreateFormPrerender, OnFileEditFormPrerender, OnDocFormPrerender\\r\\n * and OnPluginSave to force cache refresh\\r\\n * \\r\\n * Properties:\\r\\n *\\r\\n *     AcePath: URL or path to ACE javascript file\\r\\n *              default: https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.4.1\\/ace.js\\r\\n *\\r\\n *     Theme: editor theme name (you can test them all here: https:\\/\\/ace.c9.io\\/build\\/kitchen-sink.html)\\r\\n *            default: monokai\\r\\n *\\r\\n *     SoftWraps: Set editor soft wraps (either `off`, `free`, `printMargin` or a number of columns)\\r\\n *                default: off\\r\\n * \\r\\n *     FontSize: Set editor font size (in px, em, rem or %)\\r\\n *               default: 12px\\r\\n *\\r\\n *     SoftTabs: Enable soft tabs (4 spaces) instead of hard tabs (tab character)\\r\\n *               default: true\\r\\n * \\r\\n *     ReplaceCTRLDKbdShortcut: Replace the CTRL-D (or CMD-D) keyboard shortcut to perform a more sensible action\\r\\n *                              duplicate the current line or selection (instead of deleting, which is the default behavior)\\r\\n *                              default: true\\r\\n *\\r\\n *     Autocompletion: Enable Auto-completion: none, basic (show on CTRL-Space) or live (show on typing)\\r\\n *                     Note that \\"ext-language_tools.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-language_tools.js)\\r\\n *                     default: basic\\r\\n *\\r\\n *     SettingsMenu: Add a settings menu accessible with CTR-Q (or CMD-Q)\\r\\n *                   Note that \\"ext-settings_menu.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-settings_menu.js)\\r\\n *                   default: false\\r\\n *\\r\\n *     Spellcheck: Enable spell-check\\r\\n *                 Note that \\"ext-spellcheck.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-spellcheck.js)\\r\\n *                 default: false\\r\\n *\\r\\n *     EmmetPath: URL or path to Emmet js file\\r\\n *                For more information, see https:\\/\\/github.com\\/cloud9ide\\/emmet-core\\r\\n *                default: https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\r\\n *\\r\\n *     Emmet: Enable Emmet\\r\\n *            Note that Emmet JS file must be loaded first (see EmmetPath, it must be correctly set)\\r\\n *            Note that \\"ext-emmet.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-emmet.js)\\r\\n *            It is recommended to disable ReplaceCTRLDKbdShortcut property when using Emmet (as it replace an Emmet shortcut CTRL-D)\\r\\n *            default: false\\r\\n *\\r\\n *     AcePrintMarginColumn: Print margin column position\\r\\n *                           Set the character position of the print margin (for instance useful if you like to code with 80 chars wide max)\\r\\n *                           Set to 0 to disable it completely\\r\\n *                           default: 0 (disabled)\\r\\n *\\r\\n *     ChunkDetectMIMEShebang: Enable \'shebang-style\' MIME detection for chunks (in description or in the first line of chunk content)\\r\\n *                             This is particularly useful if your chunk contains directly JS, or SASS, or anything different than HTML...\\r\\n *                             Supported MIME values are text\\/x-smarty, text\\/html, application\\/xhtml+xml, text\\/css, text\\/x-scss, \\r\\n *                                                       text\\/x-sass, text\\/x-less, image\\/svg+xml, application\\/xml, text\\/xml, text\\/javascript, \\r\\n *                                                       application\\/javascript, application\\/json, text\\/x-php, application\\/x-php, text\\/x-sql, \\r\\n *                                                       text\\/x-markdown, text\\/plain, text\\/x-twig\\r\\n *                             default: true\\r\\n *\\r\\n *     ToggleFullScreenKeyBinding: Key binding used to toggle editor fullscreen (example: Ctrl-P or F11 or anything you want)\\r\\n *                                 default: F11\\r\\n *\\r\\n *     ToggleFullScreenShowButton: Display the toggle fullscreen button (on top right of the editor)\\r\\n *                                 default: true\\r\\n *\\r\\n *     EditorHeight: Editor height (in px, em, rem or %)\\r\\n *                   default: <empty> (uses default editor height)\\r\\n *\\r\\n *     EditorTVHeight: Editor height for template vars - take precedence over EditorHeight value (in px, em, rem or %)\\r\\n *                     default: <empty> (uses default editor height)\\r\\n * \\r\\n *\\r\\n * If you want to edit a property, create your own property set first.\\r\\n * Don\'t forget to associate your new property set to all events in \\"System Events\\" tab.\\r\\n *\\r\\n * Based on Ace Source Editor Plugin by Danil Kostin\\r\\n *\\r\\n * @package SimpleAceCodeEditor\\r\\n *\\r\\n * @var array $scriptProperties\\r\\n * @var Ace $ace\\r\\n *\\/\\r\\n\\r\\n\\/** Package information (set at build) **\\/\\r\\n$pluginName = \'SimpleAceCodeEditor\';\\r\\n$pluginVersion = \'1.5.2-pl\';\\r\\n\\r\\n\\/** Force mgr refresh on plugin save **\\/\\r\\nif ($modx->event->name == \'OnPluginSave\') {\\r\\n    if ($plugin->get(\'name\') === $pluginName) {\\r\\n        $modx->cacheManager->refresh(array(\\r\\n            \'context_settings\' => array(\'contexts\' => array(\'mgr\'))\\r\\n        ));\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Register RTE **\\/\\r\\nif ($modx->event->name == \'OnRichTextEditorRegister\') {\\r\\n    $modx->event->output($pluginName);\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Check if RTE (element) setting is set to this **\\/\\r\\nif ($modx->getOption(\'which_element_editor\', null) !== $pluginName) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Get properties **\\/\\r\\n$AcePath = $modx->getoption(\'AcePath\', $scriptProperties, $modx->getOption($pluginName . \'.AcePath\', null, \\"https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.4.1\\/ace.js\\"));\\r\\n$EmmetPath = $modx->getoption(\'EmmetPath\', $scriptProperties, $modx->getOption($pluginName . \'.EmmetPath\', null, \\"https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\"));\\r\\n$AceTheme = $modx->getoption(\'Theme\', $scriptProperties, $modx->getOption($pluginName . \'.Theme\', null, \'monokai\'));\\r\\n$AceSoftWraps = $modx->getoption(\'SoftWraps\', $scriptProperties, $modx->getOption($pluginName . \'.SoftWraps\', null, \'off\'));\\r\\n$AceFontSize = $modx->getoption(\'FontSize\', $scriptProperties, $modx->getOption($pluginName . \'.FontSize\', null, \'12\'));\\r\\n$AceSoftTabs = $modx->getoption(\'SoftTabs\', $scriptProperties, $modx->getOption($pluginName . \'.SoftTabs\', null, true));\\r\\n$AceReplaceCTRLDKbdShortcut = $modx->getoption(\'ReplaceCTRLDKbdShortcut\', $scriptProperties, $modx->getOption($pluginName . \'.ReplaceCTRDKbdShortcut\', null, true));\\r\\n$AceAutocompletion = $modx->getoption(\'Autocompletion\', $scriptProperties, $modx->getOption($pluginName . \'.Autocompletion\', null, \'basic\'));\\r\\n$AceSettingsMenu = $modx->getoption(\'SettingsMenu\', $scriptProperties, $modx->getOption($pluginName . \'.SettingsMenu\', null, false));\\r\\n$AceSpellcheck = $modx->getoption(\'Spellcheck\', $scriptProperties, $modx->getOption($pluginName . \'.Spellcheck\', null, false));\\r\\n$AceEmmet = $modx->getoption(\'Emmet\', $scriptProperties, $modx->getOption($pluginName . \'.Emmet\', null, false));\\r\\n$AcePrintMarginColumn = $modx->getoption(\'AcePrintMarginColumn\', $scriptProperties, $modx->getOption($pluginName . \'.AcePrintMarginColumn\', null, 0));\\r\\n$AceChunkDetectMIMEShebang = $modx->getoption(\'ChunkDetectMIMEShebang\', $scriptProperties, $modx->getOption($pluginName . \'.ChunkDetectMIMEShebang\', null, true));\\r\\n$AceToggleFullScreenKeyBinding = $modx->getoption(\'ToggleFullScreenKeyBinding\', $scriptProperties, $modx->getOption($pluginName . \'.ToggleFullScreenKeyBinding\', null, \\"F11\\"));\\r\\n$AceToggleFullScreenShowButton = $modx->getoption(\'ToggleFullScreenShowButton\', $scriptProperties, $modx->getOption($pluginName . \'.ToggleFullScreenShowButton\', null, true));\\r\\n$AceEditorHeight = $modx->getoption(\'EditorHeight\', $scriptProperties, $modx->getOption($pluginName . \'.EditorHeight\', null, null));\\r\\n$AceEditorTVHeight = $modx->getoption(\'EditorTVHeight\', $scriptProperties, $modx->getOption($pluginName . \'.EditorTVHeight\', null, null));\\r\\n\\r\\n\\/** Inits script options **\\/\\r\\n$AceAssetsUrl = $modx->getOption(\'assets_url\') . \'components\\/\' . strtolower($pluginName);\\r\\n$AceBasePath = dirname($AcePath);\\r\\n$scriptPaths = array($AcePath, \\"$AceAssetsUrl\\/modx_highlight_rules.js\\");\\r\\n$editorOptions = array(\\r\\n    \'wrap\' => $AceSoftWraps,\\r\\n    \'useSoftTabs\' => $AceSoftTabs,\\r\\n    \'navigateWithinSoftTabs\' => true\\r\\n);\\r\\n$rendererOptions = array(\\r\\n    \'theme\' => \\"ace\\/theme\\/$AceTheme\\",\\r\\n    \'showPrintMargin\' => $AcePrintMarginColumn > 0 ? true : false,\\r\\n    \'printMarginColumn\' => $AcePrintMarginColumn > 0 ? $AcePrintMarginColumn : 80,\\r\\n    \'fontSize\' => $AceFontSize\\r\\n);\\r\\n$editorAdditionalScript = \\"\\\\n\\";\\r\\n\\r\\n\\/** Handle proper CTRL-D **\\/\\r\\nif ($AceReplaceCTRLDKbdShortcut == true) {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        editor.commands.removeCommand(\'del\');\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"del\\",\\r\\n            bindKey: {win: \\"Delete\\",  mac: \\"Delete|Shift-Delete\\"},\\r\\n            exec: function(editor) { editor.remove(\\"right\\"); },\\r\\n            multiSelectAction: \\"forEach\\",\\r\\n            scrollIntoView: \\"cursor\\"\\r\\n        });\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"Duplicate Selection\\",\\r\\n            bindKey: {win: \\"Ctrl-D\\", mac: \\"Command-D\\"},\\r\\n            exec: function(editor) { editor.duplicateSelection(); },\\r\\n            scrollIntoView: \\"cursor\\",\\r\\n            multiSelectAction: \\"forEach\\"\\r\\n        });\\r\\nJS;\\r\\n}\\r\\n\\r\\n\\/** Handle autocompletion extension **\\/\\r\\nif ($AceAutocompletion === \'live\' || $AceAutocompletion === \'basic\') {\\r\\n    $editorOptions[\'enableBasicAutocompletion\'] = true;\\r\\n    $editorOptions[\'enableLiveAutocompletion\'] = $AceAutocompletion === \'live\';\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-language_tools.js\\");\\r\\n}\\r\\n\\r\\n\\/** Handle settings_menu extension **\\/\\r\\nif ($AceSettingsMenu == true) {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        var RequiresettingsMenu = ace.require(\'ace\\/ext\\/settings_menu\');\\r\\n        if (RequiresettingsMenu) {\\r\\n            \\/\\/ Init with current editor\\r\\n            RequiresettingsMenu.init(editor);\\r\\n            \\/\\/ Set CTRL-Q shortcut\\r\\n        \\teditor.commands.addCommands([{\\r\\n        \\t\\tname: \\"showSettingsMenu\\",\\r\\n        \\t\\tbindKey: {win: \\"Ctrl-q\\", mac: \\"Ctrl-q\\"},\\r\\n        \\t\\texec: function(editor) {\\r\\n        \\t\\t\\teditor.showSettingsMenu();\\r\\n        \\t\\t},\\r\\n        \\t\\treadOnly: true\\r\\n        \\t}]);\\r\\n        }\\r\\nJS;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-settings_menu.js\\");\\r\\n} \\r\\n\\r\\n\\r\\n\\/** Handle Spellcheck extension **\\/\\r\\nif ($AceSpellcheck == true) {\\r\\n    $editorOptions[\'spellcheck\'] = true;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-spellcheck.js\\");\\r\\n} \\r\\n\\r\\n\\/** Handle Emmet extension **\\/\\r\\nif ($AceEmmet == true) {\\r\\n    $editorOptions[\'enableEmmet\'] = true;\\r\\n    array_push($scriptPaths, $EmmetPath);\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-emmet.js\\");\\r\\n}\\r\\n\\r\\n\\/** Handle toggle fullscreen button **\\/\\r\\nif ($AceToggleFullScreenShowButton == true) {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        \\/\\/ Create fullscreen toggle button\\r\\n        var fullscreenButton = createFullScreenButton(editor, aceEditorDiv);\\r\\nJS;\\r\\n} else {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        var fullscreenButton = null;\\r\\nJS;\\r\\n}\\r\\n\\r\\n\\/** Handle height definition **\\/\\r\\nif ($AceEditorHeight !== null && $AceEditorHeight > 0) {\\r\\n    \\/\\/ Make sure we have a size for TVs\\r\\n    if (!$AceEditorTVHeight) $AceEditorTVHeight = $AceEditorHeight;\\r\\n\\r\\n    \\/\\/ Add px unit if no unit was set\\r\\n    $AceEditorHeight = is_numeric($AceEditorHeight) ? $AceEditorHeight.\'px\' : $AceEditorHeight;\\r\\n    $AceEditorTVHeight = is_numeric($AceEditorTVHeight) ? $AceEditorTVHeight.\'px\' : $AceEditorTVHeight;\\r\\n\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        \\/\\/ Set text area height\\r\\n        if (textarea.id.lastIndexOf(\'tv\', 0) === 0) {\\r\\n            textarea.style.height = \'{$AceEditorTVHeight}\';\\r\\n        } else {\\r\\n            textarea.style.height = \'{$AceEditorHeight}\';\\r\\n        }\\r\\nJS;\\r\\n}\\r\\n\\r\\n\\/** Corresponding arrays **\\/\\r\\n$modeThatShouldNotBeMixed = array(\'php\');\\r\\n\\r\\n$mimeTypeToMode = array(\\r\\n    \'text\\/x-smarty\'                     => \'smarty\',\\r\\n    \'text\\/html\'                         => \'html\',\\r\\n    \'application\\/xhtml+xml\'             => \'html\',\\r\\n    \'text\\/css\'                          => \'css\',\\r\\n    \'text\\/x-scss\'                       => \'scss\',\\r\\n    \'text\\/x-sass\'                       => \'scss\',\\r\\n    \'text\\/x-less\'                       => \'less\',\\r\\n    \'image\\/svg+xml\'                     => \'svg\',\\r\\n    \'application\\/xml\'                   => \'xml\',\\r\\n    \'text\\/xml\'                          => \'xml\',\\r\\n    \'text\\/javascript\'                   => \'javascript\',\\r\\n    \'application\\/javascript\'            => \'javascript\',\\r\\n    \'application\\/json\'                  => \'json\',\\r\\n    \'text\\/x-php\'                        => \'php\',\\r\\n    \'application\\/x-php\'                 => \'php\',\\r\\n    \'text\\/x-sql\'                        => \'sql\',\\r\\n    \'application\\/sql\'                   => \'sql\',\\r\\n    \'text\\/x-markdown\'                   => \'markdown\',\\r\\n    \'text\\/markdown\'                     => \'markdown\',\\r\\n    \'text\\/plain\'                        => \'text\',\\r\\n    \'text\\/x-twig\'                       => \'twig\',\\r\\n    \'application\\/x-extension-htaccess\'  => \'apache_conf\',\\r\\n    \'application\\/vnd.coffeescript\'      => \'coffee\',\\r\\n    \'application\\/x-typescript\'          => \'typescript\',\\r\\n    \'text\\/x-ini\'                        => \'ini\',\\r\\n    \'text\\/x-ejs\'                        => \'ejs\',\\r\\n    \'application\\/x-perl\'                => \'perl\',\\r\\n);\\r\\n\\r\\n$extensionMap = array(\\r\\n    \'tpl\'       => \'text\\/html\',\\r\\n    \'htm\'       => \'text\\/html\',\\r\\n    \'html\'      => \'text\\/html\',\\r\\n    \'css\'       => \'text\\/css\',\\r\\n    \'scss\'      => \'text\\/x-scss\',\\r\\n    \'sass\'      => \'text\\/x-sass\',\\r\\n    \'less\'      => \'text\\/x-less\',\\r\\n    \'svg\'       => \'image\\/svg+xml\',\\r\\n    \'xml\'       => \'application\\/xml\',\\r\\n    \'xsl\'       => \'application\\/xml\',\\r\\n    \'js\'        => \'application\\/javascript\',\\r\\n    \'json\'      => \'application\\/json\',\\r\\n    \'php\'       => \'application\\/x-php\',\\r\\n    \'sql\'       => \'text\\/x-sql\',\\r\\n    \'txt\'       => \'text\\/plain\',\\r\\n    \'htaccess\'  => \'application\\/x-extension-htaccess\',\\r\\n    \'coffee\'    => \'application\\/vnd.coffeescript\',\\r\\n    \'litcoffee\' => \'application\\/vnd.coffeescript\',\\r\\n    \'ts\'        => \'application\\/x-typescript\',\\r\\n    \'ini\'       => \'text\\/x-ini\',\\r\\n    \'ejs\'       => \'text\\/x-ejs\',\\r\\n    \'md\'        => \'text\\/markdown\',\\r\\n    \'pl\'        => \'application\\/x-perl\',\\r\\n);\\r\\n\\r\\n\\r\\n\\/** Adapt field\\/mime depending on event type **\\/\\r\\n$targetFields = [];\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnSnipFormPrerender\':\\r\\n        \\/\\/ Snippets are PHP\\r\\n        $targetFields[\'modx-snippet-snippet\'] = \'application\\/x-php\';\\r\\n        break;\\r\\n    case \'OnTempFormPrerender\':\\r\\n        \\/\\/ Templates are HTML\\r\\n        $targetFields[\'modx-template-content\'] = \'text\\/html\';\\r\\n        break;\\r\\n    case \'OnChunkFormPrerender\':\\r\\n        \\/\\/ Chunks are HTML\\r\\n        \\/\\/ unless it is static then we look at the file extension\\r\\n        \\/\\/ unless it a proper mime type is set in description or first line of chunk!\\r\\n        $targetFields[\'modx-chunk-snippet\'] = null;\\r\\n        \\r\\n        if ($modx->controller->chunk) {\\r\\n            \\/** Try to detect shebang **\\/\\r\\n            if ($AceChunkDetectMIMEShebang) {\\r\\n                \\/\\/ Retrieve description\\r\\n                $chunkDescription = $modx->controller->chunk->get(\'description\');\\r\\n                \\/\\/ Retrieve first line of chunk content\\r\\n                $chunkContentFirstLine = strtok($modx->controller->chunk->getContent(), \\"\\\\n\\");\\r\\n                \\/\\/ Loop through known mime\\r\\n                foreach(array_keys($mimeTypeToMode) as $currMimeType) {\\r\\n                    if (strpos($chunkDescription, $currMimeType) !== FALSE || \\r\\n                        strpos($chunkContentFirstLine, $currMimeType) !== FALSE) \\r\\n                    {\\r\\n                        $targetFields[\'modx-chunk-snippet\'] = $currMimeType;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            \\/** For static file, try to detect through file extension **\\/\\r\\n            if (!$targetFields[\'modx-chunk-snippet\'] && $modx->controller->chunk->isStatic()) {\\r\\n                $extension = pathinfo($modx->controller->chunk->getSourceFile(), PATHINFO_EXTENSION);\\r\\n                $targetFields[\'modx-chunk-snippet\'] = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/* Default to HTML *\\/\\r\\n        if (!$targetFields[\'modx-chunk-snippet\']) {\\r\\n            $targetFields[\'modx-chunk-snippet\'] = \'text\\/html\';\\r\\n        }\\r\\n        \\r\\n        break;\\r\\n    case \'OnPluginFormPrerender\':\\r\\n        \\/\\/ Plugins are PHP\\r\\n        $targetFields[\'modx-plugin-plugincode\'] = \'application\\/x-php\';\\r\\n        break;\\r\\n    case \'OnFileCreateFormPrerender\':\\r\\n        \\/\\/ On file creation, use plain text\\r\\n        $targetFields[\'modx-file-content\'] = \'text\\/plain\';\\r\\n        break;\\r\\n    case \'OnFileEditFormPrerender\':\\r\\n        \\/\\/ For file editing, we look at the file extension\\r\\n        \\/\\/ Identify mime type according to extension\\r\\n        $extension = pathinfo($scriptProperties[\'file\'], PATHINFO_EXTENSION);\\r\\n        $targetFields[\'modx-file-content\'] = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n        break;\\r\\n    case \'OnDocFormPrerender\':\\r\\n        \\/\\/ For document, we look at the content type\\r\\n        \\/\\/ But we wont show anything if another RTE is set (e.g. CKEditor or TinyMCE)\\r\\n        if ($modx->controller->resourceArray) {\\r\\n            $useEditor = $modx->getOption(\'use_editor\');\\r\\n            $richText = $modx->controller->resourceArray[\'richtext\'];\\r\\n            $classKey = $modx->controller->resourceArray[\'class_key\'];\\r\\n            if (!$useEditor || (!$richText && !in_array($classKey, array(\'modStaticResource\',\'modSymLink\',\'modWebLink\',\'modXMLRPCResource\')))) {\\r\\n                $targetFields[\'ta\'] = $modx->getObject(\'modContentType\', $modx->controller->resourceArray[\'content_type\'])->get(\'mime_type\');\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/ Document can have template variables associated\\r\\n        $templateId = $modx->controller->resource->get(\'template\');\\r\\n        if ($templateId) {\\r\\n            \\/\\/ Try to retrieve the template value (can be null)\\r\\n            $templateVar = $modx->getObject(\'modTemplate\', $templateId);\\r\\n            if ($templateVar) {\\r\\n                \\/\\/ Retrieve all TV\'s\\r\\n                $templateVarList = $templateVar->getTemplateVarList();\\r\\n                \\/\\/ Loop through all TV\'s\\r\\n                foreach ($templateVarList[\'collection\'] as $tv) {\\r\\n                    $tvDescription = $tv->get(\'description\');\\r\\n                    \\/\\/ Check if this TV: \\r\\n                    \\/\\/      - is associated to the current template\\r\\n                    \\/\\/      - is textarea\\r\\n                    \\/\\/      - has the char \'\\/\' in description which means a mime type is *potentially* set\\r\\n                    if ($tv->hasTemplate($templateId) && $tv->get(\'type\') === \'textarea\' && strpos($tvDescription, \'\\/\') !== FALSE) {\\r\\n                        \\/\\/ Loop through known mime\\r\\n                        foreach(array_keys($mimeTypeToMode) as $currMimeType) {\\r\\n                            if (strpos($tvDescription, $currMimeType) !== FALSE) \\r\\n                            {\\r\\n                                $targetFields[\'tv\'.$tv->get(\'id\')] = $currMimeType;\\r\\n                                break;\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n    default:\\r\\n        return;\\r\\n}\\r\\n\\r\\n\\/** If field found, include the javascript code to load Ace **\\/\\r\\nif (!empty($targetFields)) {\\r\\n\\r\\n    \\/\\/ Convert options to JSON object\\r\\n    $editorOptions = json_encode($editorOptions, JSON_FORCE_OBJECT);\\r\\n    $rendererOptions = json_encode($rendererOptions, JSON_FORCE_OBJECT);\\r\\n    \\r\\n    \\/\\/ Generate cache busting query string\\r\\n    \\/\\/ Based on current plugin version + hash of all properties\\r\\n    $propertiesHash = md5(\\"$AcePath $EmmetPath $AceTheme $AceReplaceCTRLDKbdShortcut $AceAutocompletion $AceSettingsMenu $AceSpellcheck $AceEmmet $AceChunkDetectMIMEShebang\\");\\r\\n    $CacheBustingQSValue = \\"?v=$pluginVersion-$propertiesHash\\";\\r\\n\\r\\n    \\/\\/ Generate final script!\\r\\n    $script = \\"\\";\\r\\n    foreach($scriptPaths as $scriptPath) {\\r\\n        \\/\\/ Include file\\r\\n        $script .= \\"<script src=\'$scriptPath$CacheBustingQSValue\' type=\'text\\/javascript\' charset=\'utf-8\'><\\/script>\\\\n\\";\\r\\n    }\\r\\n\\r\\n    $tryToGetTextArea = \\"\\";\\r\\n    $timeout = 0;\\r\\n    foreach ($targetFields as $targetField => $fieldMimeType) {\\r\\n        $mode = isset($mimeTypeToMode[$fieldMimeType]) ? $mimeTypeToMode[$fieldMimeType] : \'text\';\\r\\n        if (!in_array($mode, $modeThatShouldNotBeMixed)) {\\r\\n            $mode = \'mixed-\' . $mode;\\r\\n        }\\r\\n        $tryToGetTextArea .= \\"setTimeout(function(){ tryToGetTextArea(\'$targetField\', \'$mode\'); }, $timeout);\\\\n\\";\\r\\n        $timeout += 50;\\r\\n    }\\r\\n\\r\\n    \\/\\/ The script...\\r\\n    $script .= <<<HTML\\r\\n<script type=\\"text\\/javascript\\">\\r\\n    Ext.onReady(function() {\\r\\n        \\"use strict\\";\\r\\n    \\r\\n        \\/\\/ Max number of tries\\r\\n        var MAX_TRIES = 10;\\r\\n        \\r\\n        \\/\\/ Time in ms to wait between each tries\\r\\n        var WAIT_BETWEEN_TRIES_MS = 100;\\r\\n        \\r\\n        \\/\\/ Hold the current try number\\r\\n        var currentTry = 0;\\r\\n        \\r\\n        \\/\\/ Useful dom lib\\r\\n        var dom = ace.require(\\"ace\\/lib\\/dom\\");\\r\\n        \\r\\n        \\/** \\r\\n         * Function Init ACE editor\\r\\n         * Uses textarea variable\\r\\n         *\\/\\r\\n        var initAceCodeEditor = function(textarea, mode) {\\r\\n\\r\\n            \\/\\/ Set parent element to relative position\\r\\n            \\/\\/ Hence the Ace Editor div absolute positionning will be relative to it\\r\\n            textarea.parentNode.style.position = \'relative\';\\r\\n            \\r\\n            \\/\\/ Create div element for Ace\\r\\n            var aceEditorDiv = document.createElement(\\"div\\");\\r\\n            setEditorSize(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Append to DOM before the textarea\\r\\n            textarea.parentNode.insertBefore(aceEditorDiv, textarea);\\r\\n            \\r\\n            \\/\\/ Hide textarea\\r\\n            textarea.style.visibility = \'hidden\';\\r\\n            \\r\\n            \\/\\/ Create Ace editor !\\r\\n            var editor = ace.edit(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Additional scripts using editor\\r\\n            {$editorAdditionalScript}\\r\\n            \\r\\n            \\/\\/ Fullscreen toggle support\\r\\n            editor.commands.addCommand({\\r\\n                name: \\"Toggle Fullscreen\\",\\r\\n                bindKey: \\"$AceToggleFullScreenKeyBinding\\",\\r\\n                exec: function(editor) { handleFullScreen(editor, fullscreenButton); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Search while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomFind\',\\r\\n                bindKey: {win: \'Ctrl-F\', mac: \'Command-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Replace while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomReplace\',\\r\\n                bindKey: {win: \'Ctrl-H\', mac: \'Command-Option-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Additionnal Replace command\\r\\n            editor.commands.addCommand({\\r\\n                name: \'additionnalReplace\',\\r\\n                bindKey: {win: \'Ctrl-R\', mac: \'Command-R\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n        \\r\\n            \\/\\/ Ace Editor settings\\r\\n            editor.setOptions({$editorOptions});\\r\\n            editor.renderer.setOptions({$rendererOptions});\\r\\n            \\r\\n            \\/\\/ Check if mode starts with mixed-\\r\\n            \\/\\/ Which indicates that a mixed-type should be used\\r\\n            if (mode.lastIndexOf(\'mixed-\', 0) === 0) {\\r\\n                setMixedMode(editor, mode.split(\'-\')[1]);\\r\\n            } else {\\r\\n                editor.session.setMode(\'ace\\/mode\\/\' + mode);\\r\\n            }\\r\\n\\r\\n            var currentSession = editor.getSession();\\r\\n            \\r\\n            currentSession.setValue(textarea.value);\\r\\n            \\r\\n            \\/\\/ Keep Ace and textarea synchronized\\r\\n            editor.on(\\"change\\", function() {\\r\\n                textarea.value = currentSession.getValue();\\r\\n            });\\r\\n\\r\\n            \\/\\/ Run fix\\r\\n            fixJumpingCursorIssue(editor, currentSession, aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Force a resize once\\r\\n            editor.resize();\\r\\n        };\\r\\n\\r\\n        \\/** \\r\\n         * Function search for the textarea\\r\\n         * Recursive function\\r\\n         * If textarea is not found, wait a bit and search again\\r\\n         *\\/\\r\\n        var tryToGetTextArea = function(fieldName, mode) {\\r\\n            \\/\\/ Try to find the textarea\\r\\n            var textarea = document.getElementById(fieldName);\\r\\n            \\r\\n            if (textarea) {\\r\\n                \\/\\/ Element found, init!\\r\\n                initAceCodeEditor(textarea, mode);\\r\\n            } else {\\r\\n                \\/\\/ Damn, not found. Wait a bit and try again\\r\\n                setTimeout(function() {\\r\\n                    currentTry++;\\r\\n                    if (currentTry <= MAX_TRIES) {\\r\\n                        tryToGetTextArea(fieldName, mode);\\r\\n                    }\\r\\n                }, WAIT_BETWEEN_TRIES_MS);\\r\\n            }\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to set editor size between fullscreen or not\\r\\n         *\\/\\r\\n        var setEditorSize = function(editorContainer, isFullScreen) {\\r\\n            if (isFullScreen) {\\r\\n                editorContainer.style.position = \'fixed\';\\r\\n                editorContainer.style.top = (window.innerWidth > 640) ? document.getElementById(\\"modx-action-buttons\\").offsetTop + \'px\' : 0;\\r\\n                editorContainer.style.bottom = \'0\';\\r\\n                editorContainer.style.left = \'0\';\\r\\n                editorContainer.style.right = \'0\';\\r\\n                editorContainer.style[\'z-index\'] = \'10\'; \\/\\/ Top right menu has z-index of 11\\r\\n                \\r\\n                editorContainer.style.width = null;\\r\\n                editorContainer.style.height = null;\\r\\n            } else {\\r\\n                editorContainer.style.position = \'absolute\';\\r\\n                editorContainer.style.width = \'100%\';\\r\\n                editorContainer.style.height = \'100%\';\\r\\n                \\r\\n                editorContainer.style.top = null;\\r\\n                editorContainer.style.bottom = null;\\r\\n                editorContainer.style.left = null;\\r\\n                editorContainer.style.right = null;\\r\\n                editorContainer.style[\'z-index\'] = null;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        \\/** \\r\\n         * Function to create the fullscreen button toggle\\r\\n         *\\/\\r\\n        var createFullScreenButton = function(editor, aceEditorDiv) {\\r\\n            var fullscreenButton = document.createElement(\\"button\\");\\r\\n            fullscreenButton.innerHTML = \\"Fullscreen\\";\\r\\n            fullscreenButton.id = \'btnSimpleAceCodeEditorToggleFullScreen\';\\r\\n            fullscreenButton.type = \'button\';\\r\\n            fullscreenButton.style.height = \\"24px\\";\\r\\n            fullscreenButton.style.border = \\"0\\";\\r\\n            fullscreenButton.style.margin = \\"0\\";\\r\\n            fullscreenButton.style.padding = \\"0 8px\\";\\r\\n            fullscreenButton.style.fontSize = \\"12px\\";\\r\\n            fullscreenButton.style.background = \\"#099890\\";\\r\\n            fullscreenButton.style.color = \\"white\\";\\r\\n            fullscreenButton.style.cursor = \\"pointer\\";\\r\\n            fullscreenButton.title = \\"Toggle Ace editor fullscreen\\";\\r\\n\\r\\n            handleFullScreenButtonPosition(fullscreenButton, false);\\r\\n\\r\\n            fullscreenButton.onclick = function() { handleFullScreen(editor, fullscreenButton); };\\r\\n\\r\\n            \\/\\/ Append to DOM before the editor\\r\\n            aceEditorDiv.parentNode.insertBefore(fullscreenButton, aceEditorDiv);\\r\\n\\r\\n            return fullscreenButton;\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle fullscreen button position\\r\\n         *\\/\\r\\n        var handleFullScreenButtonPosition = function(fullscreenButton, isFullScreen) {\\r\\n            if (isFullScreen) {\\r\\n                fullscreenButton.style.position = \'fixed\';\\r\\n                fullscreenButton.style.right = \'35px\';\\r\\n                fullscreenButton.style[\'z-index\'] = \'11\';\\r\\n\\r\\n                fullscreenButton.style.borderTopRightRadius = null;\\r\\n                fullscreenButton.style.borderTopLeftRadius = null;\\r\\n                fullscreenButton.style.borderBottomRightRadius = \\"4px\\";\\r\\n                fullscreenButton.style.borderBottomLeftRadius = \\"4px\\";\\r\\n\\r\\n                if (window.innerWidth > 640) {\\r\\n                    var modxBtnElems = document.getElementById(\\"modx-action-buttons\\");\\r\\n                    fullscreenButton.style.top = modxBtnElems.offsetTop + modxBtnElems.offsetHeight + \'px\';\\r\\n                } else {\\r\\n                    fullscreenButton.style.top = 0;\\r\\n                }\\r\\n            } else {\\r\\n                fullscreenButton.style.position = \\"absolute\\";\\r\\n                fullscreenButton.style.top = \\"-24px\\";\\r\\n                fullscreenButton.style.right = \\"0\\";\\r\\n                fullscreenButton.style[\'z-index\'] = null;\\r\\n\\r\\n                fullscreenButton.style.borderTopRightRadius = \\"4px\\";\\r\\n                fullscreenButton.style.borderTopLeftRadius = \\"4px\\";\\r\\n                fullscreenButton.style.borderBottomRightRadius = null;\\r\\n                fullscreenButton.style.borderBottomLeftRadius = null;\\r\\n            }\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle fullscreen (toggle)\\r\\n         *\\/\\r\\n        var handleFullScreen = function(editor, fullscreenButton) {\\r\\n            \\/\\/ Toggle class\\r\\n            dom.toggleCssClass(editor.container, \\"fullScreen\\");\\r\\n            \\/\\/ Get current situation\\r\\n            var isFullScreen = dom.hasCssClass(editor.container, \\"fullScreen\\");\\r\\n            \\/\\/ Set size and resize as needed\\r\\n            setEditorSize(editor.container, isFullScreen);\\r\\n            editor.resize();\\r\\n            \\/\\/ Handle searchbox position as needed\\r\\n            handleSearchBoxPosition(editor, isFullScreen);\\r\\n            if (fullscreenButton) {\\r\\n                \\/\\/ Handle fullscreen toggle position\\r\\n                handleFullScreenButtonPosition(fullscreenButton, isFullScreen);\\r\\n            }\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox (show\\/hide)\\r\\n         *\\/\\r\\n        var handleSearchBox = function(editor, isReplace) {\\r\\n            \\/\\/ Load extension\\r\\n            ace.config.loadModule(\\"ace\\/ext\\/searchbox\\", function(e) {\\r\\n                \\/\\/ Launch searchbox\\r\\n                e.Search(editor, isReplace);\\r\\n                \\/\\/ Handle searchbox position\\r\\n                handleSearchBoxPosition(editor, dom.hasCssClass(editor.container, \\"fullScreen\\"));\\r\\n            });\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox position depending on fullscreen or not\\r\\n         *\\/\\r\\n        var handleSearchBoxPosition = function(editor, isFullScreen) {\\r\\n            if (!editor.searchBox) return;\\r\\n            \\r\\n            if (isFullScreen) {\\r\\n                \\/\\/ If fullscreen, put searchbox on bottom\\r\\n                editor.searchBox.element.style.top = \'auto\';\\r\\n                editor.searchBox.element.style.bottom = \'0\';\\r\\n            } else {\\r\\n                \\/\\/ If not, unset any specific style value previously set\\r\\n                editor.searchBox.element.style.top = null;\\r\\n                editor.searchBox.element.style.bottom = null;\\r\\n            }\\r\\n        };\\r\\n    \\r\\n        \\/** \\r\\n         * Function to create a mixed mode with MODX tags\\r\\n         * Based on the work of danyaPostfactum, see link below\\r\\n         * https:\\/\\/github.com\\/danyaPostfactum\\/modx-ace\\/blob\\/master\\/assets\\/components\\/ace\\/modx.texteditor.js\\r\\n         *\\/\\r\\n        var createModxMixedMode = function(Mode) {\\r\\n            var oop = ace.require(\\"ace\\/lib\\/oop\\");\\r\\n            \\r\\n            \\/* Create the new mixed mode *\\/\\r\\n            var ModxMixedMode = function() {\\r\\n                Mode.call(this);\\r\\n                \\r\\n                \\/\\/ Save the parent rules to be able to call them later\\r\\n                var parentHighlightRules = this.HighlightRules;\\r\\n                \\r\\n                \\/* Create the new mixed rules *\\/\\r\\n                var mixedHighlightRules = function() {\\r\\n                    \\/\\/ Set parent rules\\r\\n                    parentHighlightRules.call(this);\\r\\n                    \\r\\n                    \\/\\/ Set modx rules (function available in file modx_highlight_rules.js already loaded)\\r\\n                    modxCustomHighlightRules.call(this);\\r\\n                    \\r\\n                    \\/\\/ Normalized!\\r\\n                    this.normalizeRules();\\r\\n                };\\r\\n                \\r\\n                \\/\\/ Inherit prototype from parent rules\\r\\n                oop.inherits(mixedHighlightRules, parentHighlightRules);\\r\\n                \\r\\n                \\/\\/ Set mixed highlight rules\\r\\n                this.HighlightRules = mixedHighlightRules;\\r\\n            };\\r\\n            \\r\\n            \\/\\/ Inherit prototype from parent Mode\\r\\n            oop.inherits(ModxMixedMode, Mode);\\r\\n            \\r\\n            \\/\\/ Handle the case were a worker is defined in parent mode\\r\\n            if (Mode.prototype.createWorker) {\\r\\n                ModxMixedMode.prototype.createWorker = function(session) {\\r\\n                    \\/\\/ Call parent without \'this\'\\r\\n                    var worker = Mode.prototype.createWorker(session);\\r\\n                    if (worker) {\\r\\n                        \\/\\/ Replace onError function to handle modx tag\\r\\n                        worker.on(\\"error\\", function(e) {\\r\\n                            var annotations = [];\\r\\n                            var idx_max = e.data.length;\\r\\n                            \\/\\/ Loop through errors, and silence errors when a modx tag [[ exists\\r\\n                            for(var i = 0 ; i < idx_max ; i++) {\\r\\n                                \\/\\/ Get line\\r\\n                                var line = session.getLine(e.data[i].row);\\r\\n                                if (line.indexOf(\'[[\') === -1) {\\r\\n                                    \\/\\/ No modx tag, add to annotations\\r\\n                                    annotations.push(e.data[i]);\\r\\n                                }\\r\\n                            }\\r\\n                            session.setAnnotations(annotations);\\r\\n                        });\\r\\n                    }\\r\\n                    return worker;\\r\\n                };\\r\\n            }\\r\\n            \\r\\n            \\/\\/ We\'re done. Return the new mixed mode\\r\\n            return new ModxMixedMode();\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to set a mixed mode\\r\\n         *\\/\\r\\n        var setMixedMode = function(editor, mode) {\\r\\n            var config = ace.require(\'ace\\/config\');\\r\\n            config.loadModule([\\"mode\\", \'ace\\/mode\\/\' + mode], function(module) {\\r\\n                var mode = createModxMixedMode(module.Mode);\\r\\n                editor.session.setMode(mode);\\r\\n            }.bind(this));\\r\\n        };\\r\\n        \\r\\n        \\/**\\r\\n         * Function to fix issue with TV\'s and cursor always jumping around \\r\\n         * (see issue #14 on Github)\\r\\n         *\\r\\n         * Issue is related to how the size seems to be computed by Ace\\r\\n         * If the textarea is hidden (like move away from screen, which is \\r\\n         * the case for TV in other tabs), Ace has issue computing the proper size.\\r\\n         *\\r\\n         * Hence we try to be clever and call resize as soon as we can.\\r\\n         *\\r\\n         * This is clearly hackish, feel free to offer a PR if you have a better idea...\\r\\n         *\\/\\r\\n        var fixJumpingCursorIssue = function(editor, currentSession, aceEditorDiv) {\\r\\n            \\r\\n            \\/\\/ Force resize on first cursor change or on mousemove\\r\\n            \\/\\/ Should work for all browsers\\r\\n            \\/\\/ Downside: editor content not visible until one of the event happens\\r\\n            var onChangeCursorCallBack = function() {\\r\\n                \\/\\/ Resize - this is important\\r\\n        \\t\\teditor.resize();\\r\\n                \\/\\/ Remove all listeners for performance reason as they are not needed anymore\\r\\n        \\t\\tcurrentSession.selection.off(\'changeCursor\', onChangeCursorCallBack);\\r\\n        \\t\\teditor.off(\'mousemove\', onChangeCursorCallBack);\\r\\n            };\\r\\n            \\/\\/ Add event listeners\\r\\n            currentSession.selection.on(\'changeCursor\', onChangeCursorCallBack);\\r\\n            editor.on(\'mousemove\', onChangeCursorCallBack);\\r\\n            \\r\\n            \\/\\/ Force resize as soon as the editor become visible\\r\\n            \\/\\/ Uses IntersectionObserver, hence browser support is not good: Chrome 51+, Edge 15+, FF 55+\\r\\n            if (\'IntersectionObserver\' in window) {\\r\\n                \\/\\/ Create observer from document\\r\\n                var observer = new IntersectionObserver(function(entries, observer) {\\r\\n                    \\/\\/ Check if editor is visible\\r\\n                    if (entries[0].intersectionRatio > 0) {\\r\\n                        \\/\\/ Run callback to remove all other listeners\\r\\n                        onChangeCursorCallBack();\\r\\n                        \\/\\/ Remove observer for performance reader, this is not needed anymore\\r\\n                        observer.disconnect();\\r\\n                    }\\r\\n                }, { root: document.documentElement });\\r\\n                \\/\\/ Start observing for ace node\\r\\n                observer.observe(aceEditorDiv);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/ Start searching!\\r\\n        {$tryToGetTextArea}\\r\\n        \\r\\n    });\\r\\n<\\/script>\\r\\nHTML;\\r\\n\\r\\n    $modx->controller->addHtml($script);\\r\\n}","locked":0,"properties":"a:17:{s:7:\\"AcePath\\";a:7:{s:4:\\"name\\";s:7:\\"AcePath\\";s:4:\\"desc\\";s:51:\\"URL or path to ACE javascript file (and extensions)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:55:\\"https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.4.1\\/ace.js\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"Theme\\";a:7:{s:4:\\"name\\";s:5:\\"Theme\\";s:4:\\"desc\\";s:89:\\"editor theme name (you can test them all here: https:\\/\\/ace.c9.io\\/build\\/kitchen-sink.html)\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:37:{i:0;a:2:{s:4:\\"text\\";s:21:\\"Chrome (bright theme)\\";s:5:\\"value\\";s:6:\\"chrome\\";}i:1;a:2:{s:4:\\"text\\";s:21:\\"Clouds (bright theme)\\";s:5:\\"value\\";s:6:\\"clouds\\";}i:2;a:2:{s:4:\\"text\\";s:29:\\"Crimson Editor (bright theme)\\";s:5:\\"value\\";s:14:\\"crimson_editor\\";}i:3;a:2:{s:4:\\"text\\";s:19:\\"Dawn (bright theme)\\";s:5:\\"value\\";s:4:\\"dawn\\";}i:4;a:2:{s:4:\\"text\\";s:26:\\"Dreamweaver (bright theme)\\";s:5:\\"value\\";s:11:\\"dreamweaver\\";}i:5;a:2:{s:4:\\"text\\";s:22:\\"Eclipse (bright theme)\\";s:5:\\"value\\";s:7:\\"eclipse\\";}i:6;a:2:{s:4:\\"text\\";s:21:\\"GitHub (bright theme)\\";s:5:\\"value\\";s:6:\\"github\\";}i:7;a:2:{s:4:\\"text\\";s:23:\\"IPlastic (bright theme)\\";s:5:\\"value\\";s:8:\\"iplastic\\";}i:8;a:2:{s:4:\\"text\\";s:30:\\"Solarized Light (bright theme)\\";s:5:\\"value\\";s:15:\\"solarized_light\\";}i:9;a:2:{s:4:\\"text\\";s:23:\\"TextMate (bright theme)\\";s:5:\\"value\\";s:8:\\"textmate\\";}i:10;a:2:{s:4:\\"text\\";s:23:\\"Tomorrow (bright theme)\\";s:5:\\"value\\";s:8:\\"tomorrow\\";}i:11;a:2:{s:4:\\"text\\";s:20:\\"XCode (bright theme)\\";s:5:\\"value\\";s:5:\\"xcode\\";}i:12;a:2:{s:4:\\"text\\";s:21:\\"Kuroir (bright theme)\\";s:5:\\"value\\";s:6:\\"kuroir\\";}i:13;a:2:{s:4:\\"text\\";s:26:\\"KatzenMilch (bright theme)\\";s:5:\\"value\\";s:11:\\"katzenmilch\\";}i:14;a:2:{s:4:\\"text\\";s:25:\\"SQL Server (bright theme)\\";s:5:\\"value\\";s:9:\\"sqlserver\\";}i:15;a:2:{s:4:\\"text\\";s:21:\\"Ambiance (dark theme)\\";s:5:\\"value\\";s:8:\\"ambiance\\";}i:16;a:2:{s:4:\\"text\\";s:18:\\"Chaos (dark theme)\\";s:5:\\"value\\";s:5:\\"chaos\\";}i:17;a:2:{s:4:\\"text\\";s:28:\\"Clouds Midnight (dark theme)\\";s:5:\\"value\\";s:15:\\"clouds_midnight\\";}i:18;a:2:{s:4:\\"text\\";s:20:\\"Dracula (dark theme)\\";s:5:\\"value\\";s:7:\\"dracula\\";}i:19;a:2:{s:4:\\"text\\";s:19:\\"Cobalt (dark theme)\\";s:5:\\"value\\";s:6:\\"cobalt\\";}i:20;a:2:{s:4:\\"text\\";s:20:\\"Gruvbox (dark theme)\\";s:5:\\"value\\";s:7:\\"gruvbox\\";}i:21;a:2:{s:4:\\"text\\";s:27:\\"Green on Black (dark theme)\\";s:5:\\"value\\";s:3:\\"gob\\";}i:22;a:2:{s:4:\\"text\\";s:25:\\"idle Fingers (dark theme)\\";s:5:\\"value\\";s:12:\\"idle_fingers\\";}i:23;a:2:{s:4:\\"text\\";s:20:\\"krTheme (dark theme)\\";s:5:\\"value\\";s:8:\\"kr_theme\\";}i:24;a:2:{s:4:\\"text\\";s:22:\\"Merbivore (dark theme)\\";s:5:\\"value\\";s:9:\\"merbivore\\";}i:25;a:2:{s:4:\\"text\\";s:27:\\"Merbivore Soft (dark theme)\\";s:5:\\"value\\";s:14:\\"merbivore_soft\\";}i:26;a:2:{s:4:\\"text\\";s:28:\\"Mono Industrial (dark theme)\\";s:5:\\"value\\";s:15:\\"mono_industrial\\";}i:27;a:2:{s:4:\\"text\\";s:20:\\"Monokai (dark theme)\\";s:5:\\"value\\";s:7:\\"monokai\\";}i:28;a:2:{s:4:\\"text\\";s:27:\\"Pastel on dark (dark theme)\\";s:5:\\"value\\";s:14:\\"pastel_on_dark\\";}i:29;a:2:{s:4:\\"text\\";s:27:\\"Solarized Dark (dark theme)\\";s:5:\\"value\\";s:14:\\"solarized_dark\\";}i:30;a:2:{s:4:\\"text\\";s:21:\\"Terminal (dark theme)\\";s:5:\\"value\\";s:8:\\"terminal\\";}i:31;a:2:{s:4:\\"text\\";s:27:\\"Tomorrow Night (dark theme)\\";s:5:\\"value\\";s:14:\\"tomorrow_night\\";}i:32;a:2:{s:4:\\"text\\";s:32:\\"Tomorrow Night Blue (dark theme)\\";s:5:\\"value\\";s:19:\\"tomorrow_night_blue\\";}i:33;a:2:{s:4:\\"text\\";s:34:\\"Tomorrow Night Bright (dark theme)\\";s:5:\\"value\\";s:21:\\"tomorrow_night_bright\\";}i:34;a:2:{s:4:\\"text\\";s:31:\\"Tomorrow Night 80s (dark theme)\\";s:5:\\"value\\";s:23:\\"tomorrow_night_eighties\\";}i:35;a:2:{s:4:\\"text\\";s:21:\\"Twilight (dark theme)\\";s:5:\\"value\\";s:8:\\"twilight\\";}i:36;a:2:{s:4:\\"text\\";s:24:\\"Vibrant Ink (dark theme)\\";s:5:\\"value\\";s:11:\\"vibrant_ink\\";}}s:5:\\"value\\";s:7:\\"monokai\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:9:\\"SoftWraps\\";a:7:{s:4:\\"name\\";s:9:\\"SoftWraps\\";s:4:\\"desc\\";s:82:\\"Set editor soft wraps (either `off`, `free`, `printMargin` or a number of columns)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"off\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:8:\\"FontSize\\";a:7:{s:4:\\"name\\";s:8:\\"FontSize\\";s:4:\\"desc\\";s:42:\\"Set editor font size (in px, em, rem or %)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"12px\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:8:\\"SoftTabs\\";a:7:{s:4:\\"name\\";s:8:\\"SoftTabs\\";s:4:\\"desc\\";s:64:\\"Enable soft tabs (4 spaces) instead of hard tabs (tab character)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:23:\\"ReplaceCTRLDKbdShortcut\\";a:7:{s:4:\\"name\\";s:23:\\"ReplaceCTRLDKbdShortcut\\";s:4:\\"desc\\";s:175:\\"Replace the CTRL-D (or CMD-D) keyboard shortcut to perform a more sensible action: duplicate the current line or selection (instead of deleting, which is the default behavior)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:14:\\"Autocompletion\\";a:7:{s:4:\\"name\\";s:14:\\"Autocompletion\\";s:4:\\"desc\\";s:207:\\"Enable Autocompletion: none, basic (show on CTRL-Space) or live (show on typing) - Note that \\"ext-language_tools.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-language_tools.js)\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:3:{i:0;a:2:{s:4:\\"text\\";s:4:\\"None\\";s:5:\\"value\\";s:4:\\"none\\";}i:1;a:2:{s:4:\\"text\\";s:26:\\"Basic (show on CTRL-SPACE)\\";s:5:\\"value\\";s:5:\\"basic\\";}i:2;a:2:{s:4:\\"text\\";s:21:\\"Live (show on typing)\\";s:5:\\"value\\";s:4:\\"live\\";}}s:5:\\"value\\";s:5:\\"basic\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:12:\\"SettingsMenu\\";a:7:{s:4:\\"name\\";s:12:\\"SettingsMenu\\";s:4:\\"desc\\";s:177:\\"Add a settings menu accessible with CTR-Q (or CMD-Q) - Note that \\"ext-settings_menu.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-settings_menu.js)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:10:\\"Spellcheck\\";a:7:{s:4:\\"name\\";s:10:\\"Spellcheck\\";s:4:\\"desc\\";s:136:\\"Enable spellcheck - Note that \\"ext-spellcheck.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-spellcheck.js)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:9:\\"EmmetPath\\";a:7:{s:4:\\"name\\";s:9:\\"EmmetPath\\";s:4:\\"desc\\";s:82:\\"URL or path to Emmet javascript file (see https:\\/\\/github.com\\/cloud9ide\\/emmet-core)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:47:\\"https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:5:\\"Emmet\\";a:7:{s:4:\\"name\\";s:5:\\"Emmet\\";s:4:\\"desc\\";s:121:\\"Enable emmet - Note that \\"ext-emmet.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-emmet.js)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:20:\\"AcePrintMarginColumn\\";a:7:{s:4:\\"name\\";s:20:\\"AcePrintMarginColumn\\";s:4:\\"desc\\";s:164:\\"Print margin column position - Set the character position of the print margin (for instance useful if you like to code with 80 chars wide max) - Set to 0 to disable\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:22:\\"ChunkDetectMIMEShebang\\";a:7:{s:4:\\"name\\";s:22:\\"ChunkDetectMIMEShebang\\";s:4:\\"desc\\";s:142:\\"Enable \'shebang-style\' MIME detection for chunks (in description or in the first line of chunk content) - See README for supported MIME values\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:26:\\"ToggleFullScreenKeyBinding\\";a:7:{s:4:\\"name\\";s:26:\\"ToggleFullScreenKeyBinding\\";s:4:\\"desc\\";s:90:\\"Key binding used to toggle editor fullscreen (example: Ctrl-P or F11 or anything you want)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"F11\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:26:\\"ToggleFullScreenShowButton\\";a:7:{s:4:\\"name\\";s:26:\\"ToggleFullScreenShowButton\\";s:4:\\"desc\\";s:65:\\"Display the toggle fullscreen button (on top right of the editor)\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:12:\\"EditorHeight\\";a:7:{s:4:\\"name\\";s:12:\\"EditorHeight\\";s:4:\\"desc\\";s:35:\\"Editor height (in px, em, rem or %)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}s:14:\\"EditorTVHeight\\";a:7:{s:4:\\"name\\";s:14:\\"EditorTVHeight\\";s:4:\\"desc\\";s:95:\\"Editor height for template vars - take precedence over EditorHeight value (in px, em, rem or %)\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";N;s:4:\\"area\\";s:0:\\"\\";}}","disabled":0,"moduleguid":"","static":0,"static_file":"","content":"\\/**\\r\\n * Simple Ace Source Editor Plugin\\r\\n * https:\\/\\/github.com\\/Indigo744\\/Modx-Revo-Simple-Ace-Code-Editor\\r\\n *\\r\\n * Create plugin and paste this code or install it from Package Manager\\r\\n * Set which_element_editor system option to SimpleAceCodeEditor\\r\\n *\\r\\n * Events: OnManagerPageBeforeRender, OnRichTextEditorRegister, OnSnipFormPrerender,\\r\\n * OnTempFormPrerender, OnChunkFormPrerender, OnPluginFormPrerender,\\r\\n * OnFileCreateFormPrerender, OnFileEditFormPrerender, OnDocFormPrerender\\r\\n * and OnPluginSave to force cache refresh\\r\\n * \\r\\n * Properties:\\r\\n *\\r\\n *     AcePath: URL or path to ACE javascript file\\r\\n *              default: https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.4.1\\/ace.js\\r\\n *\\r\\n *     Theme: editor theme name (you can test them all here: https:\\/\\/ace.c9.io\\/build\\/kitchen-sink.html)\\r\\n *            default: monokai\\r\\n *\\r\\n *     SoftWraps: Set editor soft wraps (either `off`, `free`, `printMargin` or a number of columns)\\r\\n *                default: off\\r\\n * \\r\\n *     FontSize: Set editor font size (in px, em, rem or %)\\r\\n *               default: 12px\\r\\n *\\r\\n *     SoftTabs: Enable soft tabs (4 spaces) instead of hard tabs (tab character)\\r\\n *               default: true\\r\\n * \\r\\n *     ReplaceCTRLDKbdShortcut: Replace the CTRL-D (or CMD-D) keyboard shortcut to perform a more sensible action\\r\\n *                              duplicate the current line or selection (instead of deleting, which is the default behavior)\\r\\n *                              default: true\\r\\n *\\r\\n *     Autocompletion: Enable Auto-completion: none, basic (show on CTRL-Space) or live (show on typing)\\r\\n *                     Note that \\"ext-language_tools.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-language_tools.js)\\r\\n *                     default: basic\\r\\n *\\r\\n *     SettingsMenu: Add a settings menu accessible with CTR-Q (or CMD-Q)\\r\\n *                   Note that \\"ext-settings_menu.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-settings_menu.js)\\r\\n *                   default: false\\r\\n *\\r\\n *     Spellcheck: Enable spell-check\\r\\n *                 Note that \\"ext-spellcheck.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-spellcheck.js)\\r\\n *                 default: false\\r\\n *\\r\\n *     EmmetPath: URL or path to Emmet js file\\r\\n *                For more information, see https:\\/\\/github.com\\/cloud9ide\\/emmet-core\\r\\n *                default: https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\r\\n *\\r\\n *     Emmet: Enable Emmet\\r\\n *            Note that Emmet JS file must be loaded first (see EmmetPath, it must be correctly set)\\r\\n *            Note that \\"ext-emmet.js\\" must be available alongside ace.js (will be retrieve from <AcePath>\\/ext-emmet.js)\\r\\n *            It is recommended to disable ReplaceCTRLDKbdShortcut property when using Emmet (as it replace an Emmet shortcut CTRL-D)\\r\\n *            default: false\\r\\n *\\r\\n *     AcePrintMarginColumn: Print margin column position\\r\\n *                           Set the character position of the print margin (for instance useful if you like to code with 80 chars wide max)\\r\\n *                           Set to 0 to disable it completely\\r\\n *                           default: 0 (disabled)\\r\\n *\\r\\n *     ChunkDetectMIMEShebang: Enable \'shebang-style\' MIME detection for chunks (in description or in the first line of chunk content)\\r\\n *                             This is particularly useful if your chunk contains directly JS, or SASS, or anything different than HTML...\\r\\n *                             Supported MIME values are text\\/x-smarty, text\\/html, application\\/xhtml+xml, text\\/css, text\\/x-scss, \\r\\n *                                                       text\\/x-sass, text\\/x-less, image\\/svg+xml, application\\/xml, text\\/xml, text\\/javascript, \\r\\n *                                                       application\\/javascript, application\\/json, text\\/x-php, application\\/x-php, text\\/x-sql, \\r\\n *                                                       text\\/x-markdown, text\\/plain, text\\/x-twig\\r\\n *                             default: true\\r\\n *\\r\\n *     ToggleFullScreenKeyBinding: Key binding used to toggle editor fullscreen (example: Ctrl-P or F11 or anything you want)\\r\\n *                                 default: F11\\r\\n *\\r\\n *     ToggleFullScreenShowButton: Display the toggle fullscreen button (on top right of the editor)\\r\\n *                                 default: true\\r\\n *\\r\\n *     EditorHeight: Editor height (in px, em, rem or %)\\r\\n *                   default: <empty> (uses default editor height)\\r\\n *\\r\\n *     EditorTVHeight: Editor height for template vars - take precedence over EditorHeight value (in px, em, rem or %)\\r\\n *                     default: <empty> (uses default editor height)\\r\\n * \\r\\n *\\r\\n * If you want to edit a property, create your own property set first.\\r\\n * Don\'t forget to associate your new property set to all events in \\"System Events\\" tab.\\r\\n *\\r\\n * Based on Ace Source Editor Plugin by Danil Kostin\\r\\n *\\r\\n * @package SimpleAceCodeEditor\\r\\n *\\r\\n * @var array $scriptProperties\\r\\n * @var Ace $ace\\r\\n *\\/\\r\\n\\r\\n\\/** Package information (set at build) **\\/\\r\\n$pluginName = \'SimpleAceCodeEditor\';\\r\\n$pluginVersion = \'1.5.2-pl\';\\r\\n\\r\\n\\/** Force mgr refresh on plugin save **\\/\\r\\nif ($modx->event->name == \'OnPluginSave\') {\\r\\n    if ($plugin->get(\'name\') === $pluginName) {\\r\\n        $modx->cacheManager->refresh(array(\\r\\n            \'context_settings\' => array(\'contexts\' => array(\'mgr\'))\\r\\n        ));\\r\\n    }\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Register RTE **\\/\\r\\nif ($modx->event->name == \'OnRichTextEditorRegister\') {\\r\\n    $modx->event->output($pluginName);\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Check if RTE (element) setting is set to this **\\/\\r\\nif ($modx->getOption(\'which_element_editor\', null) !== $pluginName) {\\r\\n    return;\\r\\n}\\r\\n\\r\\n\\/** Get properties **\\/\\r\\n$AcePath = $modx->getoption(\'AcePath\', $scriptProperties, $modx->getOption($pluginName . \'.AcePath\', null, \\"https:\\/\\/cdnjs.cloudflare.com\\/ajax\\/libs\\/ace\\/1.4.1\\/ace.js\\"));\\r\\n$EmmetPath = $modx->getoption(\'EmmetPath\', $scriptProperties, $modx->getOption($pluginName . \'.EmmetPath\', null, \\"https:\\/\\/cloud9ide.github.io\\/emmet-core\\/emmet.js\\"));\\r\\n$AceTheme = $modx->getoption(\'Theme\', $scriptProperties, $modx->getOption($pluginName . \'.Theme\', null, \'monokai\'));\\r\\n$AceSoftWraps = $modx->getoption(\'SoftWraps\', $scriptProperties, $modx->getOption($pluginName . \'.SoftWraps\', null, \'off\'));\\r\\n$AceFontSize = $modx->getoption(\'FontSize\', $scriptProperties, $modx->getOption($pluginName . \'.FontSize\', null, \'12\'));\\r\\n$AceSoftTabs = $modx->getoption(\'SoftTabs\', $scriptProperties, $modx->getOption($pluginName . \'.SoftTabs\', null, true));\\r\\n$AceReplaceCTRLDKbdShortcut = $modx->getoption(\'ReplaceCTRLDKbdShortcut\', $scriptProperties, $modx->getOption($pluginName . \'.ReplaceCTRDKbdShortcut\', null, true));\\r\\n$AceAutocompletion = $modx->getoption(\'Autocompletion\', $scriptProperties, $modx->getOption($pluginName . \'.Autocompletion\', null, \'basic\'));\\r\\n$AceSettingsMenu = $modx->getoption(\'SettingsMenu\', $scriptProperties, $modx->getOption($pluginName . \'.SettingsMenu\', null, false));\\r\\n$AceSpellcheck = $modx->getoption(\'Spellcheck\', $scriptProperties, $modx->getOption($pluginName . \'.Spellcheck\', null, false));\\r\\n$AceEmmet = $modx->getoption(\'Emmet\', $scriptProperties, $modx->getOption($pluginName . \'.Emmet\', null, false));\\r\\n$AcePrintMarginColumn = $modx->getoption(\'AcePrintMarginColumn\', $scriptProperties, $modx->getOption($pluginName . \'.AcePrintMarginColumn\', null, 0));\\r\\n$AceChunkDetectMIMEShebang = $modx->getoption(\'ChunkDetectMIMEShebang\', $scriptProperties, $modx->getOption($pluginName . \'.ChunkDetectMIMEShebang\', null, true));\\r\\n$AceToggleFullScreenKeyBinding = $modx->getoption(\'ToggleFullScreenKeyBinding\', $scriptProperties, $modx->getOption($pluginName . \'.ToggleFullScreenKeyBinding\', null, \\"F11\\"));\\r\\n$AceToggleFullScreenShowButton = $modx->getoption(\'ToggleFullScreenShowButton\', $scriptProperties, $modx->getOption($pluginName . \'.ToggleFullScreenShowButton\', null, true));\\r\\n$AceEditorHeight = $modx->getoption(\'EditorHeight\', $scriptProperties, $modx->getOption($pluginName . \'.EditorHeight\', null, null));\\r\\n$AceEditorTVHeight = $modx->getoption(\'EditorTVHeight\', $scriptProperties, $modx->getOption($pluginName . \'.EditorTVHeight\', null, null));\\r\\n\\r\\n\\/** Inits script options **\\/\\r\\n$AceAssetsUrl = $modx->getOption(\'assets_url\') . \'components\\/\' . strtolower($pluginName);\\r\\n$AceBasePath = dirname($AcePath);\\r\\n$scriptPaths = array($AcePath, \\"$AceAssetsUrl\\/modx_highlight_rules.js\\");\\r\\n$editorOptions = array(\\r\\n    \'wrap\' => $AceSoftWraps,\\r\\n    \'useSoftTabs\' => $AceSoftTabs,\\r\\n    \'navigateWithinSoftTabs\' => true\\r\\n);\\r\\n$rendererOptions = array(\\r\\n    \'theme\' => \\"ace\\/theme\\/$AceTheme\\",\\r\\n    \'showPrintMargin\' => $AcePrintMarginColumn > 0 ? true : false,\\r\\n    \'printMarginColumn\' => $AcePrintMarginColumn > 0 ? $AcePrintMarginColumn : 80,\\r\\n    \'fontSize\' => $AceFontSize\\r\\n);\\r\\n$editorAdditionalScript = \\"\\\\n\\";\\r\\n\\r\\n\\/** Handle proper CTRL-D **\\/\\r\\nif ($AceReplaceCTRLDKbdShortcut == true) {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        editor.commands.removeCommand(\'del\');\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"del\\",\\r\\n            bindKey: {win: \\"Delete\\",  mac: \\"Delete|Shift-Delete\\"},\\r\\n            exec: function(editor) { editor.remove(\\"right\\"); },\\r\\n            multiSelectAction: \\"forEach\\",\\r\\n            scrollIntoView: \\"cursor\\"\\r\\n        });\\r\\n        editor.commands.addCommand({\\r\\n            name: \\"Duplicate Selection\\",\\r\\n            bindKey: {win: \\"Ctrl-D\\", mac: \\"Command-D\\"},\\r\\n            exec: function(editor) { editor.duplicateSelection(); },\\r\\n            scrollIntoView: \\"cursor\\",\\r\\n            multiSelectAction: \\"forEach\\"\\r\\n        });\\r\\nJS;\\r\\n}\\r\\n\\r\\n\\/** Handle autocompletion extension **\\/\\r\\nif ($AceAutocompletion === \'live\' || $AceAutocompletion === \'basic\') {\\r\\n    $editorOptions[\'enableBasicAutocompletion\'] = true;\\r\\n    $editorOptions[\'enableLiveAutocompletion\'] = $AceAutocompletion === \'live\';\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-language_tools.js\\");\\r\\n}\\r\\n\\r\\n\\/** Handle settings_menu extension **\\/\\r\\nif ($AceSettingsMenu == true) {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        var RequiresettingsMenu = ace.require(\'ace\\/ext\\/settings_menu\');\\r\\n        if (RequiresettingsMenu) {\\r\\n            \\/\\/ Init with current editor\\r\\n            RequiresettingsMenu.init(editor);\\r\\n            \\/\\/ Set CTRL-Q shortcut\\r\\n        \\teditor.commands.addCommands([{\\r\\n        \\t\\tname: \\"showSettingsMenu\\",\\r\\n        \\t\\tbindKey: {win: \\"Ctrl-q\\", mac: \\"Ctrl-q\\"},\\r\\n        \\t\\texec: function(editor) {\\r\\n        \\t\\t\\teditor.showSettingsMenu();\\r\\n        \\t\\t},\\r\\n        \\t\\treadOnly: true\\r\\n        \\t}]);\\r\\n        }\\r\\nJS;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-settings_menu.js\\");\\r\\n} \\r\\n\\r\\n\\r\\n\\/** Handle Spellcheck extension **\\/\\r\\nif ($AceSpellcheck == true) {\\r\\n    $editorOptions[\'spellcheck\'] = true;\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-spellcheck.js\\");\\r\\n} \\r\\n\\r\\n\\/** Handle Emmet extension **\\/\\r\\nif ($AceEmmet == true) {\\r\\n    $editorOptions[\'enableEmmet\'] = true;\\r\\n    array_push($scriptPaths, $EmmetPath);\\r\\n    array_push($scriptPaths, \\"$AceBasePath\\/ext-emmet.js\\");\\r\\n}\\r\\n\\r\\n\\/** Handle toggle fullscreen button **\\/\\r\\nif ($AceToggleFullScreenShowButton == true) {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        \\/\\/ Create fullscreen toggle button\\r\\n        var fullscreenButton = createFullScreenButton(editor, aceEditorDiv);\\r\\nJS;\\r\\n} else {\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        var fullscreenButton = null;\\r\\nJS;\\r\\n}\\r\\n\\r\\n\\/** Handle height definition **\\/\\r\\nif ($AceEditorHeight !== null && $AceEditorHeight > 0) {\\r\\n    \\/\\/ Make sure we have a size for TVs\\r\\n    if (!$AceEditorTVHeight) $AceEditorTVHeight = $AceEditorHeight;\\r\\n\\r\\n    \\/\\/ Add px unit if no unit was set\\r\\n    $AceEditorHeight = is_numeric($AceEditorHeight) ? $AceEditorHeight.\'px\' : $AceEditorHeight;\\r\\n    $AceEditorTVHeight = is_numeric($AceEditorTVHeight) ? $AceEditorTVHeight.\'px\' : $AceEditorTVHeight;\\r\\n\\r\\n    $editorAdditionalScript .= <<<JS\\r\\n        \\/\\/ Set text area height\\r\\n        if (textarea.id.lastIndexOf(\'tv\', 0) === 0) {\\r\\n            textarea.style.height = \'{$AceEditorTVHeight}\';\\r\\n        } else {\\r\\n            textarea.style.height = \'{$AceEditorHeight}\';\\r\\n        }\\r\\nJS;\\r\\n}\\r\\n\\r\\n\\/** Corresponding arrays **\\/\\r\\n$modeThatShouldNotBeMixed = array(\'php\');\\r\\n\\r\\n$mimeTypeToMode = array(\\r\\n    \'text\\/x-smarty\'                     => \'smarty\',\\r\\n    \'text\\/html\'                         => \'html\',\\r\\n    \'application\\/xhtml+xml\'             => \'html\',\\r\\n    \'text\\/css\'                          => \'css\',\\r\\n    \'text\\/x-scss\'                       => \'scss\',\\r\\n    \'text\\/x-sass\'                       => \'scss\',\\r\\n    \'text\\/x-less\'                       => \'less\',\\r\\n    \'image\\/svg+xml\'                     => \'svg\',\\r\\n    \'application\\/xml\'                   => \'xml\',\\r\\n    \'text\\/xml\'                          => \'xml\',\\r\\n    \'text\\/javascript\'                   => \'javascript\',\\r\\n    \'application\\/javascript\'            => \'javascript\',\\r\\n    \'application\\/json\'                  => \'json\',\\r\\n    \'text\\/x-php\'                        => \'php\',\\r\\n    \'application\\/x-php\'                 => \'php\',\\r\\n    \'text\\/x-sql\'                        => \'sql\',\\r\\n    \'application\\/sql\'                   => \'sql\',\\r\\n    \'text\\/x-markdown\'                   => \'markdown\',\\r\\n    \'text\\/markdown\'                     => \'markdown\',\\r\\n    \'text\\/plain\'                        => \'text\',\\r\\n    \'text\\/x-twig\'                       => \'twig\',\\r\\n    \'application\\/x-extension-htaccess\'  => \'apache_conf\',\\r\\n    \'application\\/vnd.coffeescript\'      => \'coffee\',\\r\\n    \'application\\/x-typescript\'          => \'typescript\',\\r\\n    \'text\\/x-ini\'                        => \'ini\',\\r\\n    \'text\\/x-ejs\'                        => \'ejs\',\\r\\n    \'application\\/x-perl\'                => \'perl\',\\r\\n);\\r\\n\\r\\n$extensionMap = array(\\r\\n    \'tpl\'       => \'text\\/html\',\\r\\n    \'htm\'       => \'text\\/html\',\\r\\n    \'html\'      => \'text\\/html\',\\r\\n    \'css\'       => \'text\\/css\',\\r\\n    \'scss\'      => \'text\\/x-scss\',\\r\\n    \'sass\'      => \'text\\/x-sass\',\\r\\n    \'less\'      => \'text\\/x-less\',\\r\\n    \'svg\'       => \'image\\/svg+xml\',\\r\\n    \'xml\'       => \'application\\/xml\',\\r\\n    \'xsl\'       => \'application\\/xml\',\\r\\n    \'js\'        => \'application\\/javascript\',\\r\\n    \'json\'      => \'application\\/json\',\\r\\n    \'php\'       => \'application\\/x-php\',\\r\\n    \'sql\'       => \'text\\/x-sql\',\\r\\n    \'txt\'       => \'text\\/plain\',\\r\\n    \'htaccess\'  => \'application\\/x-extension-htaccess\',\\r\\n    \'coffee\'    => \'application\\/vnd.coffeescript\',\\r\\n    \'litcoffee\' => \'application\\/vnd.coffeescript\',\\r\\n    \'ts\'        => \'application\\/x-typescript\',\\r\\n    \'ini\'       => \'text\\/x-ini\',\\r\\n    \'ejs\'       => \'text\\/x-ejs\',\\r\\n    \'md\'        => \'text\\/markdown\',\\r\\n    \'pl\'        => \'application\\/x-perl\',\\r\\n);\\r\\n\\r\\n\\r\\n\\/** Adapt field\\/mime depending on event type **\\/\\r\\n$targetFields = [];\\r\\nswitch ($modx->event->name) {\\r\\n    case \'OnSnipFormPrerender\':\\r\\n        \\/\\/ Snippets are PHP\\r\\n        $targetFields[\'modx-snippet-snippet\'] = \'application\\/x-php\';\\r\\n        break;\\r\\n    case \'OnTempFormPrerender\':\\r\\n        \\/\\/ Templates are HTML\\r\\n        $targetFields[\'modx-template-content\'] = \'text\\/html\';\\r\\n        break;\\r\\n    case \'OnChunkFormPrerender\':\\r\\n        \\/\\/ Chunks are HTML\\r\\n        \\/\\/ unless it is static then we look at the file extension\\r\\n        \\/\\/ unless it a proper mime type is set in description or first line of chunk!\\r\\n        $targetFields[\'modx-chunk-snippet\'] = null;\\r\\n        \\r\\n        if ($modx->controller->chunk) {\\r\\n            \\/** Try to detect shebang **\\/\\r\\n            if ($AceChunkDetectMIMEShebang) {\\r\\n                \\/\\/ Retrieve description\\r\\n                $chunkDescription = $modx->controller->chunk->get(\'description\');\\r\\n                \\/\\/ Retrieve first line of chunk content\\r\\n                $chunkContentFirstLine = strtok($modx->controller->chunk->getContent(), \\"\\\\n\\");\\r\\n                \\/\\/ Loop through known mime\\r\\n                foreach(array_keys($mimeTypeToMode) as $currMimeType) {\\r\\n                    if (strpos($chunkDescription, $currMimeType) !== FALSE || \\r\\n                        strpos($chunkContentFirstLine, $currMimeType) !== FALSE) \\r\\n                    {\\r\\n                        $targetFields[\'modx-chunk-snippet\'] = $currMimeType;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            \\r\\n            \\/** For static file, try to detect through file extension **\\/\\r\\n            if (!$targetFields[\'modx-chunk-snippet\'] && $modx->controller->chunk->isStatic()) {\\r\\n                $extension = pathinfo($modx->controller->chunk->getSourceFile(), PATHINFO_EXTENSION);\\r\\n                $targetFields[\'modx-chunk-snippet\'] = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        \\/* Default to HTML *\\/\\r\\n        if (!$targetFields[\'modx-chunk-snippet\']) {\\r\\n            $targetFields[\'modx-chunk-snippet\'] = \'text\\/html\';\\r\\n        }\\r\\n        \\r\\n        break;\\r\\n    case \'OnPluginFormPrerender\':\\r\\n        \\/\\/ Plugins are PHP\\r\\n        $targetFields[\'modx-plugin-plugincode\'] = \'application\\/x-php\';\\r\\n        break;\\r\\n    case \'OnFileCreateFormPrerender\':\\r\\n        \\/\\/ On file creation, use plain text\\r\\n        $targetFields[\'modx-file-content\'] = \'text\\/plain\';\\r\\n        break;\\r\\n    case \'OnFileEditFormPrerender\':\\r\\n        \\/\\/ For file editing, we look at the file extension\\r\\n        \\/\\/ Identify mime type according to extension\\r\\n        $extension = pathinfo($scriptProperties[\'file\'], PATHINFO_EXTENSION);\\r\\n        $targetFields[\'modx-file-content\'] = isset($extensionMap[$extension]) ? $extensionMap[$extension] : \'text\\/plain\';\\r\\n        break;\\r\\n    case \'OnDocFormPrerender\':\\r\\n        \\/\\/ For document, we look at the content type\\r\\n        \\/\\/ But we wont show anything if another RTE is set (e.g. CKEditor or TinyMCE)\\r\\n        if ($modx->controller->resourceArray) {\\r\\n            $useEditor = $modx->getOption(\'use_editor\');\\r\\n            $richText = $modx->controller->resourceArray[\'richtext\'];\\r\\n            $classKey = $modx->controller->resourceArray[\'class_key\'];\\r\\n            if (!$useEditor || (!$richText && !in_array($classKey, array(\'modStaticResource\',\'modSymLink\',\'modWebLink\',\'modXMLRPCResource\')))) {\\r\\n                $targetFields[\'ta\'] = $modx->getObject(\'modContentType\', $modx->controller->resourceArray[\'content_type\'])->get(\'mime_type\');\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/ Document can have template variables associated\\r\\n        $templateId = $modx->controller->resource->get(\'template\');\\r\\n        if ($templateId) {\\r\\n            \\/\\/ Try to retrieve the template value (can be null)\\r\\n            $templateVar = $modx->getObject(\'modTemplate\', $templateId);\\r\\n            if ($templateVar) {\\r\\n                \\/\\/ Retrieve all TV\'s\\r\\n                $templateVarList = $templateVar->getTemplateVarList();\\r\\n                \\/\\/ Loop through all TV\'s\\r\\n                foreach ($templateVarList[\'collection\'] as $tv) {\\r\\n                    $tvDescription = $tv->get(\'description\');\\r\\n                    \\/\\/ Check if this TV: \\r\\n                    \\/\\/      - is associated to the current template\\r\\n                    \\/\\/      - is textarea\\r\\n                    \\/\\/      - has the char \'\\/\' in description which means a mime type is *potentially* set\\r\\n                    if ($tv->hasTemplate($templateId) && $tv->get(\'type\') === \'textarea\' && strpos($tvDescription, \'\\/\') !== FALSE) {\\r\\n                        \\/\\/ Loop through known mime\\r\\n                        foreach(array_keys($mimeTypeToMode) as $currMimeType) {\\r\\n                            if (strpos($tvDescription, $currMimeType) !== FALSE) \\r\\n                            {\\r\\n                                $targetFields[\'tv\'.$tv->get(\'id\')] = $currMimeType;\\r\\n                                break;\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        break;\\r\\n    default:\\r\\n        return;\\r\\n}\\r\\n\\r\\n\\/** If field found, include the javascript code to load Ace **\\/\\r\\nif (!empty($targetFields)) {\\r\\n\\r\\n    \\/\\/ Convert options to JSON object\\r\\n    $editorOptions = json_encode($editorOptions, JSON_FORCE_OBJECT);\\r\\n    $rendererOptions = json_encode($rendererOptions, JSON_FORCE_OBJECT);\\r\\n    \\r\\n    \\/\\/ Generate cache busting query string\\r\\n    \\/\\/ Based on current plugin version + hash of all properties\\r\\n    $propertiesHash = md5(\\"$AcePath $EmmetPath $AceTheme $AceReplaceCTRLDKbdShortcut $AceAutocompletion $AceSettingsMenu $AceSpellcheck $AceEmmet $AceChunkDetectMIMEShebang\\");\\r\\n    $CacheBustingQSValue = \\"?v=$pluginVersion-$propertiesHash\\";\\r\\n\\r\\n    \\/\\/ Generate final script!\\r\\n    $script = \\"\\";\\r\\n    foreach($scriptPaths as $scriptPath) {\\r\\n        \\/\\/ Include file\\r\\n        $script .= \\"<script src=\'$scriptPath$CacheBustingQSValue\' type=\'text\\/javascript\' charset=\'utf-8\'><\\/script>\\\\n\\";\\r\\n    }\\r\\n\\r\\n    $tryToGetTextArea = \\"\\";\\r\\n    $timeout = 0;\\r\\n    foreach ($targetFields as $targetField => $fieldMimeType) {\\r\\n        $mode = isset($mimeTypeToMode[$fieldMimeType]) ? $mimeTypeToMode[$fieldMimeType] : \'text\';\\r\\n        if (!in_array($mode, $modeThatShouldNotBeMixed)) {\\r\\n            $mode = \'mixed-\' . $mode;\\r\\n        }\\r\\n        $tryToGetTextArea .= \\"setTimeout(function(){ tryToGetTextArea(\'$targetField\', \'$mode\'); }, $timeout);\\\\n\\";\\r\\n        $timeout += 50;\\r\\n    }\\r\\n\\r\\n    \\/\\/ The script...\\r\\n    $script .= <<<HTML\\r\\n<script type=\\"text\\/javascript\\">\\r\\n    Ext.onReady(function() {\\r\\n        \\"use strict\\";\\r\\n    \\r\\n        \\/\\/ Max number of tries\\r\\n        var MAX_TRIES = 10;\\r\\n        \\r\\n        \\/\\/ Time in ms to wait between each tries\\r\\n        var WAIT_BETWEEN_TRIES_MS = 100;\\r\\n        \\r\\n        \\/\\/ Hold the current try number\\r\\n        var currentTry = 0;\\r\\n        \\r\\n        \\/\\/ Useful dom lib\\r\\n        var dom = ace.require(\\"ace\\/lib\\/dom\\");\\r\\n        \\r\\n        \\/** \\r\\n         * Function Init ACE editor\\r\\n         * Uses textarea variable\\r\\n         *\\/\\r\\n        var initAceCodeEditor = function(textarea, mode) {\\r\\n\\r\\n            \\/\\/ Set parent element to relative position\\r\\n            \\/\\/ Hence the Ace Editor div absolute positionning will be relative to it\\r\\n            textarea.parentNode.style.position = \'relative\';\\r\\n            \\r\\n            \\/\\/ Create div element for Ace\\r\\n            var aceEditorDiv = document.createElement(\\"div\\");\\r\\n            setEditorSize(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Append to DOM before the textarea\\r\\n            textarea.parentNode.insertBefore(aceEditorDiv, textarea);\\r\\n            \\r\\n            \\/\\/ Hide textarea\\r\\n            textarea.style.visibility = \'hidden\';\\r\\n            \\r\\n            \\/\\/ Create Ace editor !\\r\\n            var editor = ace.edit(aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Additional scripts using editor\\r\\n            {$editorAdditionalScript}\\r\\n            \\r\\n            \\/\\/ Fullscreen toggle support\\r\\n            editor.commands.addCommand({\\r\\n                name: \\"Toggle Fullscreen\\",\\r\\n                bindKey: \\"$AceToggleFullScreenKeyBinding\\",\\r\\n                exec: function(editor) { handleFullScreen(editor, fullscreenButton); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Search while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomFind\',\\r\\n                bindKey: {win: \'Ctrl-F\', mac: \'Command-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Replace while fullscreen support\\r\\n            editor.commands.addCommand({\\r\\n                name: \'CustomReplace\',\\r\\n                bindKey: {win: \'Ctrl-H\', mac: \'Command-Option-F\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n            \\r\\n            \\/\\/ Additionnal Replace command\\r\\n            editor.commands.addCommand({\\r\\n                name: \'additionnalReplace\',\\r\\n                bindKey: {win: \'Ctrl-R\', mac: \'Command-R\'},\\r\\n                exec: function(editor) { handleSearchBox(editor, true); }\\r\\n            });\\r\\n        \\r\\n            \\/\\/ Ace Editor settings\\r\\n            editor.setOptions({$editorOptions});\\r\\n            editor.renderer.setOptions({$rendererOptions});\\r\\n            \\r\\n            \\/\\/ Check if mode starts with mixed-\\r\\n            \\/\\/ Which indicates that a mixed-type should be used\\r\\n            if (mode.lastIndexOf(\'mixed-\', 0) === 0) {\\r\\n                setMixedMode(editor, mode.split(\'-\')[1]);\\r\\n            } else {\\r\\n                editor.session.setMode(\'ace\\/mode\\/\' + mode);\\r\\n            }\\r\\n\\r\\n            var currentSession = editor.getSession();\\r\\n            \\r\\n            currentSession.setValue(textarea.value);\\r\\n            \\r\\n            \\/\\/ Keep Ace and textarea synchronized\\r\\n            editor.on(\\"change\\", function() {\\r\\n                textarea.value = currentSession.getValue();\\r\\n            });\\r\\n\\r\\n            \\/\\/ Run fix\\r\\n            fixJumpingCursorIssue(editor, currentSession, aceEditorDiv);\\r\\n            \\r\\n            \\/\\/ Force a resize once\\r\\n            editor.resize();\\r\\n        };\\r\\n\\r\\n        \\/** \\r\\n         * Function search for the textarea\\r\\n         * Recursive function\\r\\n         * If textarea is not found, wait a bit and search again\\r\\n         *\\/\\r\\n        var tryToGetTextArea = function(fieldName, mode) {\\r\\n            \\/\\/ Try to find the textarea\\r\\n            var textarea = document.getElementById(fieldName);\\r\\n            \\r\\n            if (textarea) {\\r\\n                \\/\\/ Element found, init!\\r\\n                initAceCodeEditor(textarea, mode);\\r\\n            } else {\\r\\n                \\/\\/ Damn, not found. Wait a bit and try again\\r\\n                setTimeout(function() {\\r\\n                    currentTry++;\\r\\n                    if (currentTry <= MAX_TRIES) {\\r\\n                        tryToGetTextArea(fieldName, mode);\\r\\n                    }\\r\\n                }, WAIT_BETWEEN_TRIES_MS);\\r\\n            }\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to set editor size between fullscreen or not\\r\\n         *\\/\\r\\n        var setEditorSize = function(editorContainer, isFullScreen) {\\r\\n            if (isFullScreen) {\\r\\n                editorContainer.style.position = \'fixed\';\\r\\n                editorContainer.style.top = (window.innerWidth > 640) ? document.getElementById(\\"modx-action-buttons\\").offsetTop + \'px\' : 0;\\r\\n                editorContainer.style.bottom = \'0\';\\r\\n                editorContainer.style.left = \'0\';\\r\\n                editorContainer.style.right = \'0\';\\r\\n                editorContainer.style[\'z-index\'] = \'10\'; \\/\\/ Top right menu has z-index of 11\\r\\n                \\r\\n                editorContainer.style.width = null;\\r\\n                editorContainer.style.height = null;\\r\\n            } else {\\r\\n                editorContainer.style.position = \'absolute\';\\r\\n                editorContainer.style.width = \'100%\';\\r\\n                editorContainer.style.height = \'100%\';\\r\\n                \\r\\n                editorContainer.style.top = null;\\r\\n                editorContainer.style.bottom = null;\\r\\n                editorContainer.style.left = null;\\r\\n                editorContainer.style.right = null;\\r\\n                editorContainer.style[\'z-index\'] = null;\\r\\n            }\\r\\n        };\\r\\n\\r\\n        \\/** \\r\\n         * Function to create the fullscreen button toggle\\r\\n         *\\/\\r\\n        var createFullScreenButton = function(editor, aceEditorDiv) {\\r\\n            var fullscreenButton = document.createElement(\\"button\\");\\r\\n            fullscreenButton.innerHTML = \\"Fullscreen\\";\\r\\n            fullscreenButton.id = \'btnSimpleAceCodeEditorToggleFullScreen\';\\r\\n            fullscreenButton.type = \'button\';\\r\\n            fullscreenButton.style.height = \\"24px\\";\\r\\n            fullscreenButton.style.border = \\"0\\";\\r\\n            fullscreenButton.style.margin = \\"0\\";\\r\\n            fullscreenButton.style.padding = \\"0 8px\\";\\r\\n            fullscreenButton.style.fontSize = \\"12px\\";\\r\\n            fullscreenButton.style.background = \\"#099890\\";\\r\\n            fullscreenButton.style.color = \\"white\\";\\r\\n            fullscreenButton.style.cursor = \\"pointer\\";\\r\\n            fullscreenButton.title = \\"Toggle Ace editor fullscreen\\";\\r\\n\\r\\n            handleFullScreenButtonPosition(fullscreenButton, false);\\r\\n\\r\\n            fullscreenButton.onclick = function() { handleFullScreen(editor, fullscreenButton); };\\r\\n\\r\\n            \\/\\/ Append to DOM before the editor\\r\\n            aceEditorDiv.parentNode.insertBefore(fullscreenButton, aceEditorDiv);\\r\\n\\r\\n            return fullscreenButton;\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle fullscreen button position\\r\\n         *\\/\\r\\n        var handleFullScreenButtonPosition = function(fullscreenButton, isFullScreen) {\\r\\n            if (isFullScreen) {\\r\\n                fullscreenButton.style.position = \'fixed\';\\r\\n                fullscreenButton.style.right = \'35px\';\\r\\n                fullscreenButton.style[\'z-index\'] = \'11\';\\r\\n\\r\\n                fullscreenButton.style.borderTopRightRadius = null;\\r\\n                fullscreenButton.style.borderTopLeftRadius = null;\\r\\n                fullscreenButton.style.borderBottomRightRadius = \\"4px\\";\\r\\n                fullscreenButton.style.borderBottomLeftRadius = \\"4px\\";\\r\\n\\r\\n                if (window.innerWidth > 640) {\\r\\n                    var modxBtnElems = document.getElementById(\\"modx-action-buttons\\");\\r\\n                    fullscreenButton.style.top = modxBtnElems.offsetTop + modxBtnElems.offsetHeight + \'px\';\\r\\n                } else {\\r\\n                    fullscreenButton.style.top = 0;\\r\\n                }\\r\\n            } else {\\r\\n                fullscreenButton.style.position = \\"absolute\\";\\r\\n                fullscreenButton.style.top = \\"-24px\\";\\r\\n                fullscreenButton.style.right = \\"0\\";\\r\\n                fullscreenButton.style[\'z-index\'] = null;\\r\\n\\r\\n                fullscreenButton.style.borderTopRightRadius = \\"4px\\";\\r\\n                fullscreenButton.style.borderTopLeftRadius = \\"4px\\";\\r\\n                fullscreenButton.style.borderBottomRightRadius = null;\\r\\n                fullscreenButton.style.borderBottomLeftRadius = null;\\r\\n            }\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle fullscreen (toggle)\\r\\n         *\\/\\r\\n        var handleFullScreen = function(editor, fullscreenButton) {\\r\\n            \\/\\/ Toggle class\\r\\n            dom.toggleCssClass(editor.container, \\"fullScreen\\");\\r\\n            \\/\\/ Get current situation\\r\\n            var isFullScreen = dom.hasCssClass(editor.container, \\"fullScreen\\");\\r\\n            \\/\\/ Set size and resize as needed\\r\\n            setEditorSize(editor.container, isFullScreen);\\r\\n            editor.resize();\\r\\n            \\/\\/ Handle searchbox position as needed\\r\\n            handleSearchBoxPosition(editor, isFullScreen);\\r\\n            if (fullscreenButton) {\\r\\n                \\/\\/ Handle fullscreen toggle position\\r\\n                handleFullScreenButtonPosition(fullscreenButton, isFullScreen);\\r\\n            }\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox (show\\/hide)\\r\\n         *\\/\\r\\n        var handleSearchBox = function(editor, isReplace) {\\r\\n            \\/\\/ Load extension\\r\\n            ace.config.loadModule(\\"ace\\/ext\\/searchbox\\", function(e) {\\r\\n                \\/\\/ Launch searchbox\\r\\n                e.Search(editor, isReplace);\\r\\n                \\/\\/ Handle searchbox position\\r\\n                handleSearchBoxPosition(editor, dom.hasCssClass(editor.container, \\"fullScreen\\"));\\r\\n            });\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to handle searchbox position depending on fullscreen or not\\r\\n         *\\/\\r\\n        var handleSearchBoxPosition = function(editor, isFullScreen) {\\r\\n            if (!editor.searchBox) return;\\r\\n            \\r\\n            if (isFullScreen) {\\r\\n                \\/\\/ If fullscreen, put searchbox on bottom\\r\\n                editor.searchBox.element.style.top = \'auto\';\\r\\n                editor.searchBox.element.style.bottom = \'0\';\\r\\n            } else {\\r\\n                \\/\\/ If not, unset any specific style value previously set\\r\\n                editor.searchBox.element.style.top = null;\\r\\n                editor.searchBox.element.style.bottom = null;\\r\\n            }\\r\\n        };\\r\\n    \\r\\n        \\/** \\r\\n         * Function to create a mixed mode with MODX tags\\r\\n         * Based on the work of danyaPostfactum, see link below\\r\\n         * https:\\/\\/github.com\\/danyaPostfactum\\/modx-ace\\/blob\\/master\\/assets\\/components\\/ace\\/modx.texteditor.js\\r\\n         *\\/\\r\\n        var createModxMixedMode = function(Mode) {\\r\\n            var oop = ace.require(\\"ace\\/lib\\/oop\\");\\r\\n            \\r\\n            \\/* Create the new mixed mode *\\/\\r\\n            var ModxMixedMode = function() {\\r\\n                Mode.call(this);\\r\\n                \\r\\n                \\/\\/ Save the parent rules to be able to call them later\\r\\n                var parentHighlightRules = this.HighlightRules;\\r\\n                \\r\\n                \\/* Create the new mixed rules *\\/\\r\\n                var mixedHighlightRules = function() {\\r\\n                    \\/\\/ Set parent rules\\r\\n                    parentHighlightRules.call(this);\\r\\n                    \\r\\n                    \\/\\/ Set modx rules (function available in file modx_highlight_rules.js already loaded)\\r\\n                    modxCustomHighlightRules.call(this);\\r\\n                    \\r\\n                    \\/\\/ Normalized!\\r\\n                    this.normalizeRules();\\r\\n                };\\r\\n                \\r\\n                \\/\\/ Inherit prototype from parent rules\\r\\n                oop.inherits(mixedHighlightRules, parentHighlightRules);\\r\\n                \\r\\n                \\/\\/ Set mixed highlight rules\\r\\n                this.HighlightRules = mixedHighlightRules;\\r\\n            };\\r\\n            \\r\\n            \\/\\/ Inherit prototype from parent Mode\\r\\n            oop.inherits(ModxMixedMode, Mode);\\r\\n            \\r\\n            \\/\\/ Handle the case were a worker is defined in parent mode\\r\\n            if (Mode.prototype.createWorker) {\\r\\n                ModxMixedMode.prototype.createWorker = function(session) {\\r\\n                    \\/\\/ Call parent without \'this\'\\r\\n                    var worker = Mode.prototype.createWorker(session);\\r\\n                    if (worker) {\\r\\n                        \\/\\/ Replace onError function to handle modx tag\\r\\n                        worker.on(\\"error\\", function(e) {\\r\\n                            var annotations = [];\\r\\n                            var idx_max = e.data.length;\\r\\n                            \\/\\/ Loop through errors, and silence errors when a modx tag [[ exists\\r\\n                            for(var i = 0 ; i < idx_max ; i++) {\\r\\n                                \\/\\/ Get line\\r\\n                                var line = session.getLine(e.data[i].row);\\r\\n                                if (line.indexOf(\'[[\') === -1) {\\r\\n                                    \\/\\/ No modx tag, add to annotations\\r\\n                                    annotations.push(e.data[i]);\\r\\n                                }\\r\\n                            }\\r\\n                            session.setAnnotations(annotations);\\r\\n                        });\\r\\n                    }\\r\\n                    return worker;\\r\\n                };\\r\\n            }\\r\\n            \\r\\n            \\/\\/ We\'re done. Return the new mixed mode\\r\\n            return new ModxMixedMode();\\r\\n        };\\r\\n        \\r\\n        \\/** \\r\\n         * Function to set a mixed mode\\r\\n         *\\/\\r\\n        var setMixedMode = function(editor, mode) {\\r\\n            var config = ace.require(\'ace\\/config\');\\r\\n            config.loadModule([\\"mode\\", \'ace\\/mode\\/\' + mode], function(module) {\\r\\n                var mode = createModxMixedMode(module.Mode);\\r\\n                editor.session.setMode(mode);\\r\\n            }.bind(this));\\r\\n        };\\r\\n        \\r\\n        \\/**\\r\\n         * Function to fix issue with TV\'s and cursor always jumping around \\r\\n         * (see issue #14 on Github)\\r\\n         *\\r\\n         * Issue is related to how the size seems to be computed by Ace\\r\\n         * If the textarea is hidden (like move away from screen, which is \\r\\n         * the case for TV in other tabs), Ace has issue computing the proper size.\\r\\n         *\\r\\n         * Hence we try to be clever and call resize as soon as we can.\\r\\n         *\\r\\n         * This is clearly hackish, feel free to offer a PR if you have a better idea...\\r\\n         *\\/\\r\\n        var fixJumpingCursorIssue = function(editor, currentSession, aceEditorDiv) {\\r\\n            \\r\\n            \\/\\/ Force resize on first cursor change or on mousemove\\r\\n            \\/\\/ Should work for all browsers\\r\\n            \\/\\/ Downside: editor content not visible until one of the event happens\\r\\n            var onChangeCursorCallBack = function() {\\r\\n                \\/\\/ Resize - this is important\\r\\n        \\t\\teditor.resize();\\r\\n                \\/\\/ Remove all listeners for performance reason as they are not needed anymore\\r\\n        \\t\\tcurrentSession.selection.off(\'changeCursor\', onChangeCursorCallBack);\\r\\n        \\t\\teditor.off(\'mousemove\', onChangeCursorCallBack);\\r\\n            };\\r\\n            \\/\\/ Add event listeners\\r\\n            currentSession.selection.on(\'changeCursor\', onChangeCursorCallBack);\\r\\n            editor.on(\'mousemove\', onChangeCursorCallBack);\\r\\n            \\r\\n            \\/\\/ Force resize as soon as the editor become visible\\r\\n            \\/\\/ Uses IntersectionObserver, hence browser support is not good: Chrome 51+, Edge 15+, FF 55+\\r\\n            if (\'IntersectionObserver\' in window) {\\r\\n                \\/\\/ Create observer from document\\r\\n                var observer = new IntersectionObserver(function(entries, observer) {\\r\\n                    \\/\\/ Check if editor is visible\\r\\n                    if (entries[0].intersectionRatio > 0) {\\r\\n                        \\/\\/ Run callback to remove all other listeners\\r\\n                        onChangeCursorCallBack();\\r\\n                        \\/\\/ Remove observer for performance reader, this is not needed anymore\\r\\n                        observer.disconnect();\\r\\n                    }\\r\\n                }, { root: document.documentElement });\\r\\n                \\/\\/ Start observing for ace node\\r\\n                observer.observe(aceEditorDiv);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        \\/\\/ Start searching!\\r\\n        {$tryToGetTextArea}\\r\\n        \\r\\n    });\\r\\n<\\/script>\\r\\nHTML;\\r\\n\\r\\n    $modx->controller->addHtml($script);\\r\\n}"}',
);